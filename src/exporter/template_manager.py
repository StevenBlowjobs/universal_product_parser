#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ Excel
"""

import json
from pathlib import Path
from typing import Dict, List, Any, Optional

from ..utils.logger import setup_logger


class TemplateManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ Excel –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, templates_dir: str = "data/input/templates"):
        self.templates_dir = Path(templates_dir)
        self.templates_dir.mkdir(parents=True, exist_ok=True)
        self.logger = setup_logger("template_manager")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        self.default_templates = {
            "basic": {
                "sheets": ["–¢–æ–≤–∞—Ä—ã", "–°–≤–æ–¥–∫–∞"],
                "columns": {
                    "–¢–æ–≤–∞—Ä—ã": ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "URL"]
                },
                "formatting": {
                    "header_color": "366092",
                    "auto_adjust_columns": True
                }
            },
            "detailed": {
                "sheets": ["–¢–æ–≤–∞—Ä—ã", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω", "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", "–í–∞–ª–∏–¥–∞—Ü–∏—è", "–°–≤–æ–¥–∫–∞"],
                "columns": {
                    "–¢–æ–≤–∞—Ä—ã": ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "URL", "–ë—Ä–µ–Ω–¥", "–†–µ–π—Ç–∏–Ω–≥"],
                    "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω": ["–¢–æ–≤–∞—Ä", "–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞", "–ù–æ–≤–∞—è —Ü–µ–Ω–∞", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è"]
                },
                "formatting": {
                    "header_color": "4472C4", 
                    "auto_adjust_columns": True,
                    "apply_borders": True
                }
            }
        }
    
    def get_template(self, template_name: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            Dict: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        custom_template = self._load_custom_template(template_name)
        if custom_template:
            return custom_template
        
        # –ó–∞—Ç–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        if template_name in self.default_templates:
            return self.default_templates[template_name]
        
        self.logger.warning(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è basic")
        return self.default_templates.get("basic")
    
    def _load_custom_template(self, template_name: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        template_file = self.templates_dir / f"{template_name}.json"
        
        if template_file.exists():
            try:
                with open(template_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_name}: {e}")
        
        return None
    
    def save_template(self, template_name: str, template_config: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            template_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            template_file = self.templates_dir / f"{template_name}.json"
            
            with open(template_file, 'w', encoding='utf-8') as f:
                json.dump(template_config, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"üíæ –®–∞–±–ª–æ–Ω '{template_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return False
    
    def list_templates(self) -> List[str]:
        """
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            List[str]: –ò–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–æ–≤
        """
        templates = list(self.default_templates.keys())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
        for template_file in self.templates_dir.glob("*.json"):
            templates.append(template_file.stem)
        
        return templates
    
    def create_custom_template(self, 
                             template_name: str,
                             sheets: List[str],
                             columns: Dict[str, List[str]],
                             formatting: Dict[str, Any] = None) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
            sheets: –°–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤
            columns: –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
            formatting: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
        """
        template_config = {
            "sheets": sheets,
            "columns": columns,
            "formatting": formatting or {
                "header_color": "366092",
                "auto_adjust_columns": True
            }
        }
        
        return self.save_template(template_name, template_config)
    
    def validate_template(self, template_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'sheets' not in template_config:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'sheets'")
        elif not isinstance(template_config['sheets'], list):
            errors.append("–ü–æ–ª–µ 'sheets' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        if 'columns' not in template_config:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'columns'")
        elif not isinstance(template_config['columns'], dict):
            errors.append("–ü–æ–ª–µ 'columns' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        if 'sheets' in template_config and 'columns' in template_config:
            for sheet in template_config['sheets']:
                if sheet not in template_config['columns']:
                    warnings.append(f"–î–ª—è –ª–∏—Å—Ç–∞ '{sheet}' –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏")
        
        return {
            'is_valid': len(errors) == 0,
            'errors': errors,
            'warnings': warnings
        }
