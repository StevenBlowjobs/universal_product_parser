#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –æ—Ç—á–µ—Ç–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure
from .data_formatter import DataFormatter
from .template_manager import TemplateManager


class ExcelGenerator:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("excel_generator")
        self.data_formatter = DataFormatter()
        self.template_manager = TemplateManager()
        
        self.export_settings = {
            'auto_adjust_columns': True,
            'include_images': False,
            'apply_formatting': True,
            'multiple_sheets': True,
            'compression': True,
            'new_structure': True  # –ù–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        }
        
        if 'export' in self.config:
            self.export_settings.update(self.config['export'])
    
    @retry_on_failure(max_retries=2)
    def generate_comprehensive_report(self, 
                                   products: List[Dict],
                                   price_comparison: Optional[Dict] = None,
                                   trend_analysis: Optional[Dict] = None,
                                   validation_results: Optional[Dict] = None,
                                   alerts: Optional[Dict] = None,
                                   site_url: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            price_comparison: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
            trend_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            validation_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            alerts: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            site_url: URL —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∞–π—Ç–∞
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞")
        
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"comprehensive_report_{timestamp}.xlsx"
            filepath = Path("data/output/excel_exports") / filename
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Excel writer
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                # –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                if self.export_settings['new_structure']:
                    self._add_products_sheet_new_structure(writer, products, "–¢–æ–≤–∞—Ä—ã")
                else:
                    self._add_products_sheet(writer, products, "–¢–æ–≤–∞—Ä—ã")
                
                # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏—Å—Ç—ã
                if price_comparison and price_comparison.get('success'):
                    self._add_price_comparison_sheet(writer, price_comparison, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω")
                
                if trend_analysis and trend_analysis.get('success'):
                    self._add_trend_analysis_sheet(writer, trend_analysis, "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
                
                if validation_results and validation_results.get('success'):
                    self._add_validation_sheet(writer, validation_results, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                
                if alerts and alerts.get('summary', {}).get('total_alerts', 0) > 0:
                    self._add_alerts_sheet(writer, alerts, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
                # –°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
                self._add_summary_sheet(writer, products, price_comparison, 
                                      trend_analysis, validation_results, alerts, site_url)
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.export_settings['apply_formatting']:
                self._apply_advanced_formatting(filepath)
            
            self.logger.info(f"‚úÖ Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filepath}")
            return str(filepath)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞: {e}")
            raise

    def _add_products_sheet_new_structure(self, writer: pd.ExcelWriter, products: List[Dict], sheet_name: str):
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ê—Ä—Ç–∏–∫—É–ª | –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ | –û–ø–∏—Å–∞–Ω–∏–µ | [–≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏] | –¶–µ–Ω–∞
        """
        if not products:
            return
        
        self.logger.info("üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á–µ—Ç–∞")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        all_characteristics = self._collect_all_characteristics(products)
        self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(all_characteristics)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataFrame
        rows = []
        for product in products:
            row = {
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product.get('category', ''),
                '–ê—Ä—Ç–∏–∫—É–ª': product.get('article', ''),
                '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏': self._format_images_field(product.get('processed_images', {})),
                '–û–ø–∏—Å–∞–Ω–∏–µ': product.get('description', ''),
                '–¶–µ–Ω–∞': product.get('price', '')
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characteristics = product.get('characteristics', {})
            for char_name in all_characteristics:
                row[char_name] = characteristics.get(char_name, '')
            
            rows.append(row)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(rows)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel(writer, sheet_name=sheet_name, index=False)
        
        # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        if self.export_settings['auto_adjust_columns']:
            self._auto_adjust_columns(writer, sheet_name, df)
        
        self.logger.info(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}' —Å–æ–∑–¥–∞–Ω: {len(rows)} —Ç–æ–≤–∞—Ä–æ–≤, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    
    def _collect_all_characteristics(self, products: List[Dict]) -> List[str]:
        """
        –°–±–æ—Ä –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        
        Returns:
            List[str]: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        """
        all_chars = set()
        
        for product in products:
            characteristics = product.get('characteristics', {})
            all_chars.update(characteristics.keys())
        
        return sorted(list(all_chars))
    
    def _format_images_field(self, processed_images: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è Excel
        
        Args:
            processed_images: –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
        """
        if not processed_images:
            return ''
        
        main_image = processed_images.get('main_image', {})
        gallery_images = processed_images.get('gallery_images', [])
        
        all_images = []
        if main_image:
            all_images.append(main_image.get('file_name', ''))
        
        for img in gallery_images:
            all_images.append(img.get('file_name', ''))
        
        return '; '.join(all_images) if all_images else ''
    
    def _add_products_sheet(self, writer: pd.ExcelWriter, products: List[Dict], sheet_name: str):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if not products:
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        formatted_products = self.data_formatter.format_products_for_export(products)
        df = pd.DataFrame(formatted_products)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        df.to_excel(writer, sheet_name=sheet_name, index=False)
        
        # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        if self.export_settings['auto_adjust_columns']:
            self._auto_adjust_columns(writer, sheet_name, df)
    
    def _add_price_comparison_sheet(self, writer: pd.ExcelWriter, price_comparison: Dict, sheet_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω"""
        comparison_data = []
        
        # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for changed_product in price_comparison.get('changed_products', []):
            price_change = changed_product.get('price_change', {})
            comparison_data.append({
                '–¢–æ–≤–∞—Ä': changed_product.get('name', ''),
                '–ê—Ä—Ç–∏–∫—É–ª': changed_product.get('article', ''),  # –ù–û–í–û–ï –ü–û–õ–ï
                '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': price_change.get('old_price'),
                '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': price_change.get('new_price'),
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)': price_change.get('change_percent', 0),
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—Ä—É–±)': price_change.get('change_amount', 0),
                '–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ' if price_change.get('change_direction') == 'increase' else '–°–Ω–∏–∂–µ–Ω–∏–µ',
                '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ': '–î–∞' if price_change.get('significant') else '–ù–µ—Ç'
            })
        
        # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        for new_product in price_comparison.get('new_products', []):
            comparison_data.append({
                '–¢–æ–≤–∞—Ä': new_product.get('name', ''),
                '–ê—Ä—Ç–∏–∫—É–ª': new_product.get('article', ''),  # –ù–û–í–û–ï –ü–û–õ–ï
                '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': '–ù/–î',
                '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': new_product.get('price'),
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)': '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—Ä—É–±)': '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
                '–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è': '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
                '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ': '–ù/–î'
            })
        
        if comparison_data:
            df = pd.DataFrame(comparison_data)
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            self._auto_adjust_columns(writer, sheet_name, df)
    
    def _add_trend_analysis_sheet(self, writer: pd.ExcelWriter, trend_analysis: Dict, sheet_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends_data = []
        
        for product_key, analysis in trend_analysis.get('trends_analysis', {}).items():
            trends_data.append({
                '–¢–æ–≤–∞—Ä': analysis.get('product_key', ''),
                '–ê—Ä—Ç–∏–∫—É–ª': analysis.get('article', ''),  # –ù–û–í–û–ï –ü–û–õ–ï
                '–¢—Ä–µ–Ω–¥': self._translate_trend(analysis.get('trend_direction', '')),
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)': analysis.get('total_change_percent', 0),
                '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞': analysis.get('price_range', {}).get('current', 0),
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': analysis.get('price_range', {}).get('min', 0),
                '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': analysis.get('price_range', {}).get('max', 0),
                '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å': analysis.get('volatility', 0),
                '–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö': analysis.get('data_points', {}).get('total', 0),
                '–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏)': analysis.get('data_points', {}).get('period_days', 0)
            })
        
        if trends_data:
            df = pd.DataFrame(trends_data)
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            self._auto_adjust_columns(writer, sheet_name, df)
    
    def _add_validation_sheet(self, writer: pd.ExcelWriter, validation_results: Dict, sheet_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        validation_data = []
        
        # –í–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for valid_product in validation_results.get('valid_products', []):
            product = valid_product.get('product', {})
            validation_data.append({
                '–¢–æ–≤–∞—Ä': product.get('name', ''),
                '–ê—Ä—Ç–∏–∫—É–ª': product.get('article', ''),  # –ù–û–í–û–ï –ü–û–õ–ï
                '–°—Ç–∞—Ç—É—Å': '‚úÖ –í–∞–ª–∏–¥–µ–Ω',
                '–û—à–∏–±–∫–∏': '–ù–µ—Ç',
                '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è': '; '.join(valid_product.get('warnings', [])),
                '–¶–µ–Ω–∞': product.get('price', ''),
                'URL': product.get('url', '')
            })
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for invalid_product in validation_results.get('invalid_products', []):
            product = invalid_product.get('product', {})
            validation_data.append({
                '–¢–æ–≤–∞—Ä': product.get('name', ''),
                '–ê—Ä—Ç–∏–∫—É–ª': product.get('article', ''),  # –ù–û–í–û–ï –ü–û–õ–ï
                '–°—Ç–∞—Ç—É—Å': '‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω',
                '–û—à–∏–±–∫–∏': '; '.join(invalid_product.get('errors', [])),
                '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è': '; '.join(invalid_product.get('warnings', [])),
                '–¶–µ–Ω–∞': product.get('price', ''),
                'URL': product.get('url', '')
            })
        
        if validation_data:
            df = pd.DataFrame(validation_data)
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            self._auto_adjust_columns(writer, sheet_name, df)
    
    def _add_alerts_sheet(self, writer: pd.ExcelWriter, alerts: Dict, sheet_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        alerts_data = []
        
        alert_types = {
            'price_alerts': 'üí∞ –¶–µ–Ω—ã',
            'availability_alerts': 'üì¶ –ù–∞–ª–∏—á–∏–µ',
            'trend_alerts': 'üìà –¢—Ä–µ–Ω–¥—ã',
            'quality_alerts': 'üîç –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö'
        }
        
        for alert_type, alert_list in alerts.items():
            if isinstance(alert_list, list):
                for alert in alert_list:
                    alerts_data.append({
                        '–¢–∏–ø': alert_types.get(alert_type, alert_type),
                        '–£—Ä–æ–≤–µ–Ω—å': alert.get('level', 'UNKNOWN'),
                        '–¢–æ–≤–∞—Ä': alert.get('product', '–û–±—â–∏–π'),
                        '–ê—Ä—Ç–∏–∫—É–ª': alert.get('article', ''),  # –ù–û–í–û–ï –ü–û–õ–ï
                        '–°–æ–æ–±—â–µ–Ω–∏–µ': alert.get('message', ''),
                        '–î–µ—Ç–∞–ª–∏': str(alert.get('details', {}))
                    })
        
        if alerts_data:
            df = pd.DataFrame(alerts_data)
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            self._auto_adjust_columns(writer, sheet_name, df)
    
    def _add_summary_sheet(self, writer: pd.ExcelWriter, products: List[Dict], 
                          price_comparison: Optional[Dict], trend_analysis: Optional[Dict],
                          validation_results: Optional[Dict], alerts: Optional[Dict],
                          site_url: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        summary_data = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
        summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
        summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': 'URL —Å–∞–π—Ç–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': site_url})
        summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': len(products)})
        
        # –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ê—Ä—Ç–∏–∫—É–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        articles_generated = len([p for p in products if p.get('article')])
        images_processed = sum([len(p.get('processed_images', {}).get('processed_images', [])) for p in products])
        
        summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤', '–ó–Ω–∞—á–µ–Ω–∏–µ': articles_generated})
        summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': images_processed})
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
        if price_comparison and price_comparison.get('success'):
            price_changes = price_comparison.get('price_changes', {})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã', 
                               '–ó–Ω–∞—á–µ–Ω–∏–µ': price_changes.get('increased', 0) + price_changes.get('decreased', 0)})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–£–≤–µ–ª–∏—á–∏–ª–æ—Å—å –≤ —Ü–µ–Ω–µ', '–ó–Ω–∞—á–µ–Ω–∏–µ': price_changes.get('increased', 0)})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–°–Ω–∏–∑–∏–ª–æ—Å—å –≤ —Ü–µ–Ω–µ', '–ó–Ω–∞—á–µ–Ω–∏–µ': price_changes.get('decreased', 0)})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', 
                               '–ó–Ω–∞—á–µ–Ω–∏–µ': len(price_comparison.get('new_products', []))})
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if validation_results and validation_results.get('success'):
            metrics = validation_results.get('quality_metrics', {})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞', 
                               '–ó–Ω–∞—á–µ–Ω–∏–µ': f"{metrics.get('quality_score', 0):.2%}"})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', 
                               '–ó–Ω–∞—á–µ–Ω–∏–µ': metrics.get('valid_products_count', 0)})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', 
                               '–ó–Ω–∞—á–µ–Ω–∏–µ': metrics.get('invalid_products_count', 0)})
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if alerts:
            summary = alerts.get('summary', {})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ó–Ω–∞—á–µ–Ω–∏–µ': ''})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': summary.get('total_alerts', 0)})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö', '–ó–Ω–∞—á–µ–Ω–∏–µ': summary.get('critical_alerts', 0)})
            summary_data.append({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', '–ó–Ω–∞—á–µ–Ω–∏–µ': summary.get('warning_alerts', 0)})
        
        df = pd.DataFrame(summary_data)
        df.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
        self._auto_adjust_columns(writer, '–°–≤–æ–¥–∫–∞', df)
    
    def _translate_trend(self, trend: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
        trends = {
            'upward': 'üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π',
            'downward': 'üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π', 
            'stable': '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π',
            'uncertain': '‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π'
        }
        return trends.get(trend, trend)
    
    def _auto_adjust_columns(self, writer: pd.ExcelWriter, sheet_name: str, df: pd.DataFrame):
        """–ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫"""
        try:
            worksheet = writer.sheets[sheet_name]
            
            for idx, col in enumerate(df.columns):
                max_length = max(
                    df[col].astype(str).str.len().max(),
                    len(str(col))
                )
                worksheet.column_dimensions[get_column_letter(idx + 1)].width = min(max_length + 2, 50)
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {e}")
    
    def _apply_advanced_formatting(self, filepath: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            workbook = openpyxl.load_workbook(filepath)
            
            # –°—Ç–∏–ª–∏
            header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            header_font = Font(color="FFFFFF", bold=True)
            border = Border(left=Side(style='thin'), right=Side(style='thin'),
                          top=Side(style='thin'), bottom=Side(style='thin'))
            
            for sheet_name in workbook.sheetnames:
                worksheet = workbook[sheet_name]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                for cell in worksheet[1]:
                    cell.fill = header_fill
                    cell.font = header_font
                    cell.border = border
                    cell.alignment = Alignment(horizontal='center')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                for row in worksheet.iter_rows(min_row=2):
                    for cell in row:
                        cell.border = border
            
            workbook.save(filepath)
            self.logger.info("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
    
    def generate_quick_export(self, products: List[Dict], filename: str = None) -> str:
        """
        –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        if not filename:
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"quick_export_{timestamp}.xlsx"
        
        filepath = Path("data/output/excel_exports") / filename
        filepath.parent.mkdir(parents=True, exist_ok=True)
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –°–¢–†–£–ö–¢–£–†–£ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –≠–ö–°–ü–û–†–¢–ê
        if self.export_settings['new_structure']:
            all_characteristics = self._collect_all_characteristics(products)
            rows = []
            for product in products:
                row = {
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product.get('category', ''),
                    '–ê—Ä—Ç–∏–∫—É–ª': product.get('article', ''),
                    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏': self._format_images_field(product.get('processed_images', {})),
                    '–û–ø–∏—Å–∞–Ω–∏–µ': product.get('description', ''),
                    '–¶–µ–Ω–∞': product.get('price', '')
                }
                
                characteristics = product.get('characteristics', {})
                for char_name in all_characteristics:
                    row[char_name] = characteristics.get(char_name, '')
                
                rows.append(row)
            
            df = pd.DataFrame(rows)
        else:
            df = pd.DataFrame(products)
        
        df.to_excel(filepath, index=False, engine='openpyxl')
        
        self.logger.info(f"üíæ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {filepath}")
        return str(filepath)
