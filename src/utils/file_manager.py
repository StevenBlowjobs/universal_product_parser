#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import json
import pickle
import csv
import os
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional, Union
from datetime import datetime, timedelta
from .logger import setup_logger


class FileManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏, –∫—ç—à–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, base_path: str = "data"):
        self.base_path = Path(base_path)
        self.logger = setup_logger("file_manager")
        self._ensure_directories()
    
    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            'input',
            'output/excel_exports',
            'output/processed_images/original',
            'output/processed_images/no_watermark', 
            'output/processed_images/no_background',
            'output/processed_images/final',
            'output/logs',
            'temp/cache',
            'temp/session_data'
        ]
        
        for directory in directories:
            path = self.base_path / directory
            path.mkdir(parents=True, exist_ok=True)
            self.logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
    
    def save_json(self, data: Any, filename: str, subfolder: str = "") -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            subfolder: –ü–æ–¥–ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        filepath = self._build_path(filename, subfolder, 'json')
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False, default=str)
            
            self.logger.debug(f"üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return str(filepath)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON {filepath}: {e}")
            raise
    
    def load_json(self, filename: str, subfolder: str = "") -> Any:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        filepath = self._build_path(filename, subfolder, 'json')
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.logger.debug(f"üìÇ JSON –∑–∞–≥—Ä—É–∂–µ–Ω: {filepath}")
            return data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON {filepath}: {e}")
            return None
    
    def save_cache(self, key: str, data: Any, expire_hours: int = 24) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à —Å TTL
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            expire_hours: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞
        """
        cache_data = {
            'data': data,
            'created_at': datetime.now().isoformat(),
            'expires_at': (datetime.now() + timedelta(hours=expire_hours)).isoformat()
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –∫–ª—é—á–∞
        safe_key = self._safe_filename(key)
        filepath = self.base_path / 'temp' / 'cache' / f"{safe_key}.pkl"
        
        try:
            with open(filepath, 'wb') as f:
                pickle.dump(cache_data, f)
            
            self.logger.debug(f"üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {key} -> {filepath}")
            return str(filepath)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ {key}: {e}")
            raise
    
    def load_cache(self, key: str) -> Any:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π TTL"""
        safe_key = self._safe_filename(key)
        filepath = self.base_path / 'temp' / 'cache' / f"{safe_key}.pkl"
        
        if not filepath.exists():
            return None
        
        try:
            with open(filepath, 'rb') as f:
                cache_data = pickle.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
            expires_at = datetime.fromisoformat(cache_data['expires_at'])
            if datetime.now() > expires_at:
                self.logger.debug(f"üóëÔ∏è –ö—ç—à –ø—Ä–æ—Å—Ä–æ—á–µ–Ω: {key}")
                filepath.unlink()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫—ç—à
                return None
            
            self.logger.debug(f"üìÇ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: {key}")
            return cache_data['data']
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ {key}: {e}")
            return None
    
    def save_image(self, image_data: bytes, filename: str, category: str = "original") -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        
        Args:
            image_data: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (original, no_watermark, no_background, final)
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        valid_categories = ['original', 'no_watermark', 'no_background', 'final']
        if category not in valid_categories:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º–æ: {valid_categories}")
        
        filepath = self.base_path / 'output' / 'processed_images' / category / filename
        
        try:
            with open(filepath, 'wb') as f:
                f.write(image_data)
            
            self.logger.debug(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            return str(filepath)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filepath}: {e}")
            raise
    
    def load_image(self, filename: str, category: str = "original") -> Optional[bytes]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        filepath = self.base_path / 'output' / 'processed_images' / category / filename
        
        try:
            with open(filepath, 'rb') as f:
                image_data = f.read()
            
            self.logger.debug(f"üìÇ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filepath}")
            return image_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filepath}: {e}")
            return None
    
    def save_excel_backup(self, data: List[Dict], prefix: str = "products") -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSON –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤ Excel
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{prefix}_backup_{timestamp}.json"
        
        backup_data = {
            'metadata': {
                'created_at': datetime.now().isoformat(),
                'total_items': len(data),
                'prefix': prefix
            },
            'products': data
        }
        
        return self.save_json(backup_data, filename, 'temp/session_data')
    
    def list_files(self, pattern: str = "*", subfolder: str = "") -> List[Path]:
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        directory = self.base_path / subfolder if subfolder else self.base_path
        return list(directory.rglob(pattern))
    
    def cleanup_old_files(self, days: int = 7, pattern: str = "*"):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        Args:
            days: –£–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
            pattern: –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        """
        cutoff_time = datetime.now() - timedelta(days=days)
        
        for filepath in self.list_files(pattern):
            if filepath.is_file():
                file_time = datetime.fromtimestamp(filepath.stat().st_mtime)
                if file_time < cutoff_time:
                    try:
                        filepath.unlink()
                        self.logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filepath}")
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {filepath}: {e}")
    
    def get_file_info(self, filepath: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        path = Path(filepath)
        
        if not path.exists():
            return {}
        
        stat = path.stat()
        return {
            'path': str(path),
            'size_bytes': stat.st_size,
            'size_mb': round(stat.st_size / (1024 * 1024), 2),
            'modified_at': datetime.fromtimestamp(stat.st_mtime),
            'created_at': datetime.fromtimestamp(stat.st_ctime),
            'extension': path.suffix.lower(),
            'is_file': path.is_file(),
            'is_dir': path.is_dir()
        }
    
    def _build_path(self, filename: str, subfolder: str, extension: str) -> Path:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        if subfolder:
            path = self.base_path / subfolder / f"{filename}.{extension}"
        else:
            path = self.base_path / f"{filename}.{extension}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        path.parent.mkdir(parents=True, exist_ok=True)
        return path
    
    def _safe_filename(self, filename: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –ó–∞–º–µ–Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_name = re.sub(r'[<>:"/\\|?*]', '_', filename)
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        safe_name = re.sub(r'_+', '_', safe_name)
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        return safe_name[:100]
