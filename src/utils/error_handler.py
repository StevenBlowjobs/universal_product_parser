#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
"""

import asyncio
import time
from functools import wraps
from typing import Dict, Any, Callable, Optional
from .logger import setup_logger


class ParserError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self, message: str, original_error: Exception = None, context: Dict[str, Any] = None):
        self.message = message
        self.original_error = original_error
        self.context = context or {}
        super().__init__(self.message)
    
    def __str__(self):
        if self.original_error:
            return f"{self.message} (Original: {self.original_error})"
        return self.message


class NetworkError(ParserError):
    """–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    pass


class ParseError(ParserError):
    """–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    pass


class ConfigurationError(ParserError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class AntiDetectionError(ParserError):
    """–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏-–±–æ—Ç –∑–∞—â–∏—Ç—ã"""
    pass


def retry_on_failure(max_retries: int = 3, delay: float = 1.0, backoff: float = 2.0,
                    exceptions: tuple = (Exception,), logger_name: str = "error_handler"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        exceptions: –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        logger_name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
    """
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            logger = setup_logger(logger_name)
            last_exception = None
            
            for attempt in range(max_retries + 1):
                try:
                    if attempt > 0:
                        logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} –¥–ª—è {func.__name__}")
                    
                    return await func(*args, **kwargs)
                    
                except exceptions as e:
                    last_exception = e
                    
                    if attempt == max_retries:
                        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π –¥–ª—è {func.__name__}: {e}")
                        raise
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å backoff
                    wait_time = delay * (backoff ** attempt)
                    logger.warning(f"‚è≥ –û—à–∏–±–∫–∞ –≤ {func.__name__}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.1f} —Å–µ–∫: {e}")
                    
                    await asyncio.sleep(wait_time)
            
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –Ω–æ –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
            raise last_exception
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            logger = setup_logger(logger_name)
            last_exception = None
            
            for attempt in range(max_retries + 1):
                try:
                    if attempt > 0:
                        logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} –¥–ª—è {func.__name__}")
                    
                    return func(*args, **kwargs)
                    
                except exceptions as e:
                    last_exception = e
                    
                    if attempt == max_retries:
                        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π –¥–ª—è {func.__name__}: {e}")
                        raise
                    
                    wait_time = delay * (backoff ** attempt)
                    logger.warning(f"‚è≥ –û—à–∏–±–∫–∞ –≤ {func.__name__}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.1f} —Å–µ–∫: {e}")
                    
                    time.sleep(wait_time)
            
            raise last_exception
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π wrapper –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator


class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("error_handler")
        self.error_stats = {
            'total_errors': 0,
            'by_type': {},
            'recovered_errors': 0
        }
    
    def handle_error(self, error: Exception, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏
        """
        self.error_stats['total_errors'] += 1
        
        error_type = type(error).__name__
        self.error_stats['by_type'][error_type] = self.error_stats['by_type'].get(error_type, 0) + 1
        
        context = context or {}
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        if isinstance(error, NetworkError):
            self.logger.warning(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {error}", extra=context)
        elif isinstance(error, ParseError):
            self.logger.error(f"üìÑ –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {error}", extra=context)
        elif isinstance(error, AntiDetectionError):
            self.logger.error(f"üõ°Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã: {error}", extra=context)
        else:
            self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error}", extra=context)
        
        # –†–µ—à–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        recovery_action = self._get_recovery_action(error, context)
        
        if recovery_action['can_recover']:
            self.error_stats['recovered_errors'] += 1
            self.logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {recovery_action['action']}")
        
        return {
            'error_type': error_type,
            'message': str(error),
            'context': context,
            'recovery_action': recovery_action,
            'timestamp': time.time()
        }
    
    def _get_recovery_action(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""
        
        if isinstance(error, NetworkError):
            return {
                'can_recover': True,
                'action': 'retry_with_delay',
                'delay': 5,
                'max_retries': 3
            }
        
        elif isinstance(error, AntiDetectionError):
            return {
                'can_recover': True,
                'action': 'change_user_agent_and_retry',
                'delay': 10,
                'max_retries': 2
            }
        
        elif isinstance(error, ParseError):
            # –î–ª—è –æ—à–∏–±–æ–∫ —Ä–∞–∑–±–æ—Ä–∞ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            return {
                'can_recover': True,
                'action': 'use_fallback_selectors',
                'delay': 1,
                'max_retries': 1
            }
        
        else:
            return {
                'can_recover': False,
                'action': 'abort',
                'reason': 'Unknown error type'
            }
    
    def get_error_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        return self.error_stats.copy()
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        self.error_stats = {
            'total_errors': 0,
            'by_type': {},
            'recovered_errors': 0
        }
    
    def create_error_report(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö"""
        stats = self.get_error_stats()
        
        return {
            'summary': {
                'total_errors': stats['total_errors'],
                'recovered_errors': stats['recovered_errors'],
                'success_rate': (1 - stats['total_errors'] / max(stats['total_errors'], 1)) * 100,
                'recovery_rate': (stats['recovered_errors'] / max(stats['total_errors'], 1)) * 100
            },
            'details': {
                'errors_by_type': stats['by_type'],
                'timestamp': time.time()
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
global_error_handler = ErrorHandler()

def handle_global_error(error: Exception, context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    
    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    return global_error_handler.handle_error(error, context)

def get_global_error_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
    return global_error_handler.get_error_stats()
