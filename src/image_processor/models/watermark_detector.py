#!/usr/bin/env python3
"""
–î–µ—Ç–µ–∫—Ç–æ—Ä –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
"""

import cv2
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from ...utils.logger import setup_logger
from ...utils.error_handler import retry_on_failure


class WatermarkDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""

    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("watermark_detector")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.detection_params = {
            'min_watermark_area': 100,
            'max_watermark_area': 50000,
            'edge_threshold': 50,
            'texture_threshold': 0.1,
            'corner_confidence': 0.7
        }

        if 'image_processing' in self.config:
            self.detection_params.update(self.config['image_processing'])

    @retry_on_failure(max_retries=2)
    def detect_watermarks(self, image: np.ndarray) -> Dict[str, Any]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏

        Args:
            image: –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        """
        self.logger.info("üîç –î–µ—Ç–µ–∫—Ü–∏—è –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫")

        try:
            watermarks = []
            gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏
            methods = [
                self._detect_by_edges,
                self._detect_by_texture,
                self._detect_by_corners,
                self._detect_by_contours
            ]

            for method in methods:
                method_result = method(image, gray)
                watermarks.extend(method_result)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            filtered_watermarks = self._filter_overlapping_watermarks(watermarks)

            result = {
                'watermarks_found': len(filtered_watermarks) > 0,
                'watermarks': filtered_watermarks,
                'total_detected': len(filtered_watermarks)
            }

            self.logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫: {len(filtered_watermarks)}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫: {e}")
            return {
                'watermarks_found': False,
                'watermarks': [],
                'error': str(e)
            }

    def _detect_by_edges(self, image: np.ndarray, gray: np.ndarray) -> List[Dict[str, Any]]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º"""
        watermarks = []

        # –î–µ—Ç–µ–∫—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü
        edges = cv2.Canny(gray, 50, 150)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            area = cv2.contourArea(contour)
            if self.detection_params['min_watermark_area'] < area < self.detection_params['max_watermark_area']:
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã (–≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏ —á–∞—Å—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ)
                aspect_ratio = w / h
                if 0.2 < aspect_ratio < 5:
                    watermarks.append({
                        'bbox': (x, y, w, h),
                        'type': 'edge_based',
                        'confidence': min(area / 1000, 1.0),
                        'area': area
                    })

        return watermarks

    def _detect_by_texture(self, image: np.ndarray, gray: np.ndarray) -> List[Dict[str, Any]]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É—Ä–µ"""
        watermarks = []

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
        sobelx = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
        sobely = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
        gradient_magnitude = np.sqrt(sobelx**2 + sobely**2)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        gradient_magnitude = (gradient_magnitude / gradient_magnitude.max() * 255).astype(np.uint8)

        # –ü–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        _, texture_mask = cv2.threshold(gradient_magnitude, 50, 255, cv2.THRESH_BINARY)

        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        kernel = np.ones((3, 3), np.uint8)
        texture_mask = cv2.morphologyEx(texture_mask, cv2.MORPH_CLOSE, kernel)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(texture_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            area = cv2.contourArea(contour)
            if area > self.detection_params['min_watermark_area']:
                x, y, w, h = cv2.boundingRect(contour)
                watermarks.append({
                    'bbox': (x, y, w, h),
                    'type': 'texture_based',
                    'confidence': 0.6,
                    'area': area
                })

        return watermarks

    def _detect_by_corners(self, image: np.ndarray, gray: np.ndarray) -> List[Dict[str, Any]]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ —É–≥–ª–æ–≤—ã–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º"""
        watermarks = []

        # –î–µ—Ç–µ–∫—Ç–æ—Ä —É–≥–ª–æ–≤ –®–∏-–¢–æ–º–∞—Å–∏
        corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 10)
        
        if corners is not None:
            corners = np.int0(corners)

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä—ã
            corner_clusters = self._cluster_corners(corners)

            for cluster in corner_clusters:
                if len(cluster) >= 4:  # –ú–∏–Ω–∏–º—É–º 4 —É–≥–ª–∞ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
                    x_coords = [c[0][0] for c in cluster]
                    y_coords = [c[0][1] for c in cluster]
                    
                    x_min, x_max = min(x_coords), max(x_coords)
                    y_min, y_max = min(y_coords), max(y_coords)
                    
                    w = x_max - x_min
                    h = y_max - y_min
                    area = w * h

                    if self.detection_params['min_watermark_area'] < area < self.detection_params['max_watermark_area']:
                        watermarks.append({
                            'bbox': (x_min, y_min, w, h),
                            'type': 'corner_based',
                            'confidence': self.detection_params['corner_confidence'],
                            'area': area,
                            'corner_count': len(cluster)
                        })

        return watermarks

    def _detect_by_contours(self, image: np.ndarray, gray: np.ndarray) -> List[Dict[str, Any]]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ –∫–æ–Ω—Ç—É—Ä–∞–º"""
        watermarks = []

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                     cv2.THRESH_BINARY, 11, 2)

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        thresh = cv2.bitwise_not(thresh)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            area = cv2.contourArea(contour)
            if area > self.detection_params['min_watermark_area']:
                x, y, w, h = cv2.boundingRect(contour)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç (–≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –∫ –ø–ª–æ—â–∞–¥–∏)
                perimeter = cv2.arcLength(contour, True)
                if perimeter > 0:
                    circularity = 4 * np.pi * area / (perimeter * perimeter)
                    if circularity < 0.5:  # –ù–∏–∑–∫–∞—è –∫—Ä—É–≥–ª–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç
                        watermarks.append({
                            'bbox': (x, y, w, h),
                            'type': 'contour_based',
                            'confidence': 0.7,
                            'area': area,
                            'circularity': circularity
                        })

        return watermarks

    def _cluster_corners(self, corners: np.ndarray, max_distance: int = 50) -> List[List]:
        """–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É–≥–ª–æ–≤"""
        clusters = []
        used = set()

        for i, corner1 in enumerate(corners):
            if i in used:
                continue

            cluster = [corner1]
            used.add(i)

            for j, corner2 in enumerate(corners):
                if j in used:
                    continue

                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —É–≥–ª–∞–º–∏
                dist = np.sqrt((corner1[0][0] - corner2[0][0])**2 + 
                             (corner1[0][1] - corner2[0][1])**2)

                if dist < max_distance:
                    cluster.append(corner2)
                    used.add(j)

            clusters.append(cluster)

        return clusters

    def _filter_overlapping_watermarks(self, watermarks: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –≤–æ—Ç–µ—Ä–º–∞—Ä–æ–∫"""
        if not watermarks:
            return []

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        watermarks.sort(key=lambda x: x['confidence'], reverse=True)

        filtered = []
        used_areas = []

        for wm in watermarks:
            bbox = wm['bbox']
            x, y, w, h = bbox
            current_area = (x, y, x + w, y + h)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏
            overlap = False
            for used_area in used_areas:
                if self._calculate_iou(current_area, used_area) > 0.3:
                    overlap = True
                    break

            if not overlap:
                filtered.append(wm)
                used_areas.append(current_area)

        return filtered

    def _calculate_iou(self, box1: Tuple, box2: Tuple) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ Intersection over Union"""
        x1_min, y1_min, x1_max, y1_max = box1
        x2_min, y2_min, x2_max, y2_max = box2

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        inter_x_min = max(x1_min, x2_min)
        inter_y_min = max(y1_min, y2_min)
        inter_x_max = min(x1_max, x2_max)
        inter_y_max = min(y1_max, y2_max)

        inter_area = max(0, inter_x_max - inter_x_min) * max(0, inter_y_max - inter_y_min)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        area1 = (x1_max - x1_min) * (y1_max - y1_min)
        area2 = (x2_max - x2_min) * (y2_max - y2_min)
        union_area = area1 + area2 - inter_area

        return inter_area / union_area if union_area > 0 else 0
