#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import cv2
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from pathlib import Path
from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure


class ImageEditor:
    """–†–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""

    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("image_editor")

    @retry_on_failure(max_retries=2)
    def resize_image(self, image_path: str, output_path: str, 
                   new_size: Tuple[int, int], keep_aspect_ratio: bool = True) -> Dict[str, Any]:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            new_size: –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
            keep_aspect_ratio: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {image_path} -> {new_size}")

        try:
            image = self._load_image(image_path)
            if image is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'original_path': image_path
                }

            if keep_aspect_ratio:
                resized_image = self._resize_keep_aspect(image, new_size)
            else:
                resized_image = cv2.resize(image, new_size, interpolation=cv2.INTER_CUBIC)

            save_success = self._save_image(resized_image, output_path)

            result = {
                'success': save_success,
                'original_path': image_path,
                'output_path': output_path if save_success else None,
                'original_size': image.shape[:2],
                'new_size': resized_image.shape[:2]
            }

            if save_success:
                self.logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω: {output_path}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'original_path': image_path
            }

    @retry_on_failure(max_retries=2)
    def crop_image(self, image_path: str, output_path: str, 
                 crop_box: Tuple[int, int, int, int]) -> Dict[str, Any]:
        """
        –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            crop_box: –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ (x, y, width, height)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")

        try:
            image = self._load_image(image_path)
            if image is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'original_path': image_path
                }

            x, y, w, h = crop_box
            cropped_image = image[y:y+h, x:x+w]

            save_success = self._save_image(cropped_image, output_path)

            result = {
                'success': save_success,
                'original_path': image_path,
                'output_path': output_path if save_success else None,
                'crop_box': crop_box,
                'original_size': image.shape[:2],
                'cropped_size': cropped_image.shape[:2]
            }

            if save_success:
                self.logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ: {output_path}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'original_path': image_path
            }

    @retry_on_failure(max_retries=2)
    def adjust_brightness_contrast(self, image_path: str, output_path: str,
                                 brightness: float = 0, contrast: float = 0) -> Dict[str, Any]:
        """
        –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞

        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            brightness: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏ (-100 –¥–æ 100)
            contrast: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (-100 –¥–æ 100)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"üåÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏/–∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞: {image_path}")

        try:
            image = self._load_image(image_path)
            if image is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'original_path': image_path
                }

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            brightness = max(-100, min(100, brightness))
            contrast = max(-100, min(100, contrast))

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            adjusted_image = self._apply_brightness_contrast(image, brightness, contrast)

            save_success = self._save_image(adjusted_image, output_path)

            result = {
                'success': save_success,
                'original_path': image_path,
                'output_path': output_path if save_success else None,
                'brightness': brightness,
                'contrast': contrast
            }

            if save_success:
                self.logger.info(f"‚úÖ –Ø—Ä–∫–æ—Å—Ç—å/–∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: {output_path}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'original_path': image_path
            }

    @retry_on_failure(max_retries=2)
    def convert_format(self, image_path: str, output_path: str, 
                     new_format: str) -> Dict[str, Any]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            new_format: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (jpg, png, webp)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {image_path} -> {new_format}")

        try:
            image = self._load_image(image_path)
            if image is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'original_path': image_path
                }

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
            output_path = Path(output_path).with_suffix(f'.{new_format}')
            save_success = self._save_image(image, str(output_path))

            result = {
                'success': save_success,
                'original_path': image_path,
                'output_path': str(output_path) if save_success else None,
                'original_format': Path(image_path).suffix,
                'new_format': new_format
            }

            if save_success:
                self.logger.info(f"‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {output_path}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'original_path': image_path
            }

    def _load_image(self, image_path: str) -> Optional[np.ndarray]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            image = cv2.imread(image_path)
            if image is None:
                return None
            return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {image_path}: {e}")
            return None

    def _save_image(self, image: np.ndarray, output_path: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ BGR –¥–ª—è OpenCV
            if len(image.shape) == 3:
                image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
            else:
                image_bgr = image

            success = cv2.imwrite(output_path, image_bgr)
            return success

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {output_path}: {e}")
            return False

    def _resize_keep_aspect(self, image: np.ndarray, new_size: Tuple[int, int]) -> np.ndarray:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
        h, w = image.shape[:2]
        target_w, target_h = new_size

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale = min(target_w / w, target_h / h)

        new_w = int(w * scale)
        new_h = int(h * scale)

        # –†–µ—Å–∞–π–∑
        resized = cv2.resize(image, (new_w, new_h), interpolation=cv2.INTER_CUBIC)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ü–µ–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –∑–∞–ª–∏–≤–∫–æ–π —á–µ—Ä–Ω—ã–º
        result = np.zeros((target_h, target_w, 3), dtype=np.uint8)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        x = (target_w - new_w) // 2
        y = (target_h - new_h) // 2

        result[y:y+new_h, x:x+new_w] = resized

        return result

    def _apply_brightness_contrast(self, image: np.ndarray, 
                                 brightness: float, contrast: float) -> np.ndarray:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        image = image.astype(np.float32)

        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏
        if brightness != 0:
            if brightness > 0:
                image = image * (1 - brightness/100) + (255 * brightness/100)
            else:
                image = image * (1 + brightness/100)

        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        if contrast != 0:
            factor = (259 * (contrast + 255)) / (255 * (259 - contrast))
            image = factor * (image - 128) + 128

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        image = np.clip(image, 0, 255)

        return image.astype(np.uint8)

    def get_image_info(self, image_path: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏

        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        """
        try:
            image = self._load_image(image_path)
            if image is None:
                return {}

            h, w = image.shape[:2]
            channels = image.shape[2] if len(image.shape) == 3 else 1

            return {
                'path': image_path,
                'width': w,
                'height': h,
                'channels': channels,
                'file_size': Path(image_path).stat().st_size,
                'format': Path(image_path).suffix.lower()
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
