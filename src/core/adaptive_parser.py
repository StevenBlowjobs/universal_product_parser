#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""

import asyncio
import yaml
from typing import Dict, List, Optional, Any
from pathlib import Path
from playwright.async_api import async_playwright, Browser, Page
from .structure_detector import WebsiteStructureDetector
from .content_extractor import ContentExtractor
from .navigation_manager import NavigationManager
from ..utils.anti_detection import AntiDetectionSystem
from ..utils.logger import setup_logger
from ..utils.error_handler import ParserError, retry_on_failure
from ..utils.article_generator import ArticleGenerator
from ..image_processor.product_images_manager import ProductImagesManager


class AdaptiveProductParser:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞"""
    
    def __init__(self, config_path: str = "config/parser_config.yaml"):
        self.config = self._load_config(config_path)
        self.logger = setup_logger("parser")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∫–æ–Ω—Ñ–∏–≥–∞
        parser_config = self.config.get('parser', {})
        self.anti_detection = AntiDetectionSystem(parser_config.get('anti_detection', {}))
        
        self.structure_detector = WebsiteStructureDetector()
        self.content_extractor = None
        self.navigation_manager = None
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∫–æ–Ω—Ñ–∏–≥–∞
        self.article_generator = ArticleGenerator(
            self.config.get('article_generation', {})
        )
        self.images_manager = ProductImagesManager(
            self.config.get('product_images_processing', {})  # –ò–°–ü–†–ê–í–õ–ï–ù–û: product_images_processing –≤–º–µ—Å—Ç–æ image_processing
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        self.detected_selectors: Dict[str, str] = {}
        self.playwright = None
        self.context = None
        
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        try:
            config_file = Path(config_path)
            if not config_file.exists():
                raise ParserError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                
            with open(config_file, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
                self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {config_path}")
                return config
        except Exception as e:
            raise ParserError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫ Playwright
            self.playwright = await async_playwright().start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            browser_config = self.config.get('parser', {}).get('browser', {})
            launch_options = self.anti_detection.get_browser_launch_options()
            launch_options.update({
                'headless': browser_config.get('headless', True),
                'slow_mo': browser_config.get('slow_mo', 100),
            })
            
            self.browser = await self.playwright.chromium.launch(**launch_options)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            context_options = self.anti_detection.get_context_options()
            self.context = await self.browser.new_context(**context_options)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ viewport
            viewport_config = self.config.get('parser', {}).get('browser', {})
            await self.context.set_viewport_size({
                'width': viewport_config.get('viewport_width', 1920),
                'height': viewport_config.get('viewport_height', 1080)
            })
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.page = await self.context.new_page()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await self._setup_page_handlers()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if hasattr(self.images_manager, 'initialize'):
                await self.images_manager.initialize()
            else:
                self.logger.warning("‚ö†Ô∏è ProductImagesManager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ initialize")
            
            self.logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            await self.close()
            raise ParserError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    async def _setup_page_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.page:
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —É–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        async def route_handler(route):
            request = route.request
            resource_type = request.resource_type
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if resource_type in ["image", "document"]:
                await route.continue_()
            else:
                await route.abort()
                
        await self.page.route("**/*", route_handler)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await self.page.set_extra_http_headers({
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
        })
    
    @retry_on_failure(max_retries=3)
    async def parse_site(self, target_url: str, filters: Optional[Dict] = None) -> List[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞
        
        Args:
            target_url: URL —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∞–π—Ç–∞
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (—Ü–µ–Ω–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç.–¥.)
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        self.logger.info(f"üéØ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {target_url}")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            navigation_config = self.config.get('parser', {}).get('navigation', {})
            timeout = navigation_config.get('pagination_timeout', 30) * 1000  # Convert to ms
            
            await self.page.goto(target_url, wait_until="domcontentloaded", timeout=timeout)
            
            # –û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã (Cloudflare –∏ —Ç.–¥.)
            await self.anti_detection.bypass_protection(self.page)
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            await self.page.wait_for_load_state('networkidle')
            
            # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
            self.logger.info("üîç –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞...")
            html_content = await self.page.content()
            self.detected_selectors = self.structure_detector.auto_detect_selectors(html_content)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            self.content_extractor = ContentExtractor(self.detected_selectors)
            self.navigation_manager = NavigationManager(self.page, self.detected_selectors)
            
            self.logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {len(self.detected_selectors)} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = await self.navigation_manager.get_categories()
            self.logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
            all_products = []
            max_categories = navigation_config.get('max_categories', 10)
            max_products = navigation_config.get('max_products_per_category', 50)
            
            for category in categories[:max_categories]:
                self.logger.info(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.get('name', 'Unknown')}")
                
                try:
                    products = await self.navigation_manager.parse_category(
                        category['url'], 
                        filters
                    )
                    
                    # –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ñ–î–û–ì–û –¢–û–í–ê–†–ê –° –ì–ï–ù–ï–†–ê–¶–ò–ï–ô –ê–†–¢–ò–ö–£–õ–û–í –ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
                    processed_products = []
                    for product in products[:max_products]:
                        try:
                            processed_product = await self._enrich_product_data(product)
                            processed_products.append(processed_product)
                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                            continue
                    
                    all_products.extend(processed_products)
                    
                    self.logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.get('name', 'Unknown')}': {len(processed_products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.get('name', 'Unknown')}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                    continue
            
            self.logger.info(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
            return all_products
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            raise ParserError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞: {e}")
    
    async def parse_single_product(self, product_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ URL"""
        try:
            navigation_config = self.config.get('parser', {}).get('navigation', {})
            timeout = navigation_config.get('pagination_timeout', 30) * 1000
            
            await self.page.goto(product_url, wait_until="domcontentloaded", timeout=timeout)
            await self.page.wait_for_load_state('networkidle')
            
            html_content = await self.page.content()
            
            if not self.content_extractor:
                # –î–µ—Ç–µ–∫—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω
                self.detected_selectors = self.structure_detector.auto_detect_selectors(html_content)
                self.content_extractor = ContentExtractor(self.detected_selectors)
            
            product_data = self.content_extractor.extract_product_data(html_content, product_url)
            
            # –û–ë–û–ì–ê–©–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–û–í–ê–†–ê
            enriched_data = await self._enrich_product_data(product_data)
            
            return enriched_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ {product_url}: {e}")
            return None
    
    async def _enrich_product_data(self, product_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            product_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            Dict[str, Any]: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        """
        try:
            # –ì–ï–ù–ï–†–ê–¶–ò–Ø –ê–†–¢–ò–ö–£–õ–ê
            if 'article' not in product_data or not product_data['article']:
                product_data['article'] = self.article_generator.generate_article(product_data)
                self.logger.debug(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞—Ä—Ç–∏–∫—É–ª: {product_data['article']}")
            
            # –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            image_urls = product_data.get('image_urls', [])
            if not image_urls:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
                image_url = product_data.get('image_url')
                if image_url:
                    image_urls = [image_url]
            
            if image_urls:
                self.logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(image_urls)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_data['article']}")
                
                try:
                    processed_images = await self.images_manager.process_product_images(
                        image_urls, 
                        product_data['article']
                    )
                    product_data['processed_images'] = processed_images
                    
                    approved_count = processed_images.get('moderation_results', {}).get('approved_count', 0)
                    self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {approved_count} –æ–¥–æ–±—Ä–µ–Ω–æ")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                    product_data['processed_images'] = {
                        'original_count': len(image_urls),
                        'processed_images': [],
                        'moderation_results': {'total_processed': 0, 'approved_count': 0},
                        'main_image': None,
                        'gallery_images': [],
                        'error': str(e)
                    }
            else:
                product_data['processed_images'] = {
                    'original_count': 0,
                    'processed_images': [],
                    'moderation_results': {'total_processed': 0, 'approved_count': 0},
                    'main_image': None,
                    'gallery_images': []
                }
                self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_data['article']}")
            
            return product_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            product_data['processing_error'] = str(e)
            return product_data
    
    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if hasattr(self.images_manager, 'close'):
                await self.images_manager.close()
            elif hasattr(self.images_manager, 'close') and callable(getattr(self.images_manager, 'close')):
                self.images_manager.close()
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        
        if self.browser:
            await self.browser.close()
            self.browser = None
            
        if self.playwright:
            await self.playwright.stop()
            self.playwright = None
        
        self.logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    async def __aenter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager"""
        await self.initialize()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager"""
        await self.close()
