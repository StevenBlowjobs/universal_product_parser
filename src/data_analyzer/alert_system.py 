#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
import smtplib
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart

from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure


class AlertSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("alert_system")
        
        self.alert_settings = {
            'price_change_threshold': 0.15,  # 15% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            'new_product_alert': True,
            'discontinued_product_alert': True,
            'high_volatility_alert': True,
            'trend_reversal_alert': True,
            'min_confidence': 0.7
        }
        
        if 'alerts' in self.config:
            self.alert_settings.update(self.config['alerts'])
    
    @retry_on_failure(max_retries=2)
    def check_for_alerts(self, 
                        price_comparison: Dict[str, Any],
                        trend_analysis: Dict[str, Any],
                        validation_results: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            price_comparison: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
            trend_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            validation_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            Dict: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        """
        self.logger.info("üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        try:
            alerts = {
                'price_alerts': [],
                'availability_alerts': [],
                'trend_alerts': [],
                'quality_alerts': [],
                'summary': {
                    'total_alerts': 0,
                    'critical_alerts': 0,
                    'warning_alerts': 0
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
            alerts['price_alerts'] = self._check_price_alerts(price_comparison)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–ª–∏—á–∏—è
            alerts['availability_alerts'] = self._check_availability_alerts(price_comparison)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            alerts['trend_alerts'] = self._check_trend_alerts(trend_analysis)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            alerts['quality_alerts'] = self._check_quality_alerts(validation_results)
            
            # –°–≤–æ–¥–∫–∞
            total_alerts = (len(alerts['price_alerts']) + 
                          len(alerts['availability_alerts']) + 
                          len(alerts['trend_alerts']) + 
                          len(alerts['quality_alerts']))
            
            critical_alerts = sum(1 for alert_list in alerts.values() 
                                if isinstance(alert_list, list) 
                                for alert in alert_list if alert.get('level') == 'CRITICAL')
            
            alerts['summary'] = {
                'total_alerts': total_alerts,
                'critical_alerts': critical_alerts,
                'warning_alerts': total_alerts - critical_alerts,
                'check_timestamp': datetime.now().isoformat()
            }
            
            self.logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_alerts} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            return alerts
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return {
                'success': False,
                'error': str(e),
                'price_alerts': [],
                'availability_alerts': [],
                'trend_alerts': [],
                'quality_alerts': [],
                'summary': {'total_alerts': 0, 'critical_alerts': 0, 'warning_alerts': 0}
            }
    
    def _check_price_alerts(self, price_comparison: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —Ü–µ–Ω–∞–º"""
        alerts = []
        
        if not price_comparison.get('success'):
            return alerts
        
        # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        for changed_product in price_comparison.get('changed_products', []):
            price_change = changed_product.get('price_change', {})
            
            if price_change.get('significant', False):
                alerts.append({
                    'type': 'PRICE_CHANGE',
                    'level': 'CRITICAL',
                    'product': changed_product.get('name', 'Unknown'),
                    'message': f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change['change_percent']:.1f}%",
                    'details': {
                        'old_price': price_change['old_price'],
                        'new_price': price_change['new_price'],
                        'change_percent': price_change['change_percent'],
                        'direction': price_change['change_direction']
                    }
                })
        
        return alerts
    
    def _check_availability_alerts(self, price_comparison: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –Ω–∞–ª–∏—á–∏—é"""
        alerts = []
        
        if not price_comparison.get('success'):
            return alerts
        
        # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        if self.alert_settings['new_product_alert']:
            for new_product in price_comparison.get('new_products', []):
                alerts.append({
                    'type': 'NEW_PRODUCT',
                    'level': 'WARNING',
                    'product': new_product.get('name', 'Unknown'),
                    'message': "–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                    'details': {
                        'price': new_product.get('price'),
                        'category': new_product.get('category')
                    }
                })
        
        # –ü—Ä–æ–ø–∞–≤—à–∏–µ —Ç–æ–≤–∞—Ä—ã
        if self.alert_settings['discontinued_product_alert']:
            for discontinued_product in price_comparison.get('discontinued_products', []):
                alerts.append({
                    'type': 'DISCONTINUED_PRODUCT',
                    'level': 'WARNING',
                    'product': discontinued_product.get('name', 'Unknown'),
                    'message': "–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω",
                    'details': {
                        'last_price': discontinued_product.get('price'),
                        'last_seen': datetime.now().isoformat()
                    }
                })
        
        return alerts
    
    def _check_trend_alerts(self, trend_analysis: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º"""
        alerts = []
        
        if not trend_analysis.get('success'):
            return alerts
        
        # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if self.alert_settings['high_volatility_alert']:
            volatility_analysis = trend_analysis.get('summary', {}).get('volatility_analysis', {})
            high_vol_count = volatility_analysis.get('high_volatility_count', 0)
            
            if high_vol_count > 5:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
                alerts.append({
                    'type': 'HIGH_VOLATILITY',
                    'level': 'WARNING',
                    'message': f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω —É {high_vol_count} —Ç–æ–≤–∞—Ä–æ–≤",
                    'details': {
                        'affected_products': high_vol_count,
                        'average_volatility': volatility_analysis.get('average_volatility', 0)
                    }
                })
        
        # –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        if self.alert_settings['trend_reversal_alert']:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
            pass
        
        return alerts
    
    def _check_quality_alerts(self, validation_results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö"""
        alerts = []
        
        if not validation_results.get('success'):
            return alerts
        
        quality_metrics = validation_results.get('quality_metrics', {})
        quality_score = quality_metrics.get('quality_score', 1.0)
        
        if quality_score < 0.7:
            alerts.append({
                'type': 'DATA_QUALITY',
                'level': 'CRITICAL',
                'message': f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {quality_score:.2f}",
                'details': {
                    'quality_score': quality_score,
                    'valid_products': quality_metrics.get('valid_products_count', 0),
                    'invalid_products': quality_metrics.get('invalid_products_count', 0)
                }
            })
        
        # –ú–Ω–æ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        invalid_count = quality_metrics.get('invalid_products_count', 0)
        total_count = validation_results.get('total_products', 0)
        
        if total_count > 0 and invalid_count / total_count > 0.3:  # 30% –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö
            alerts.append({
                'type': 'HIGH_INVALID_DATA',
                'level': 'WARNING', 
                'message': f"–ú–Ω–æ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {invalid_count} –∏–∑ {total_count}",
                'details': {
                    'invalid_count': invalid_count,
                    'total_count': total_count,
                    'invalid_ratio': invalid_count / total_count
                }
            })
        
        return alerts
    
    def send_alerts(self, alerts: Dict[str, Any], method: str = 'log') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            alerts: –°–æ–±—Ä–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            method: –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ ('log', 'email', 'console')
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            if method == 'log':
                return self._send_to_log(alerts)
            elif method == 'console':
                return self._send_to_console(alerts)
            elif method == 'email':
                return self._send_to_email(alerts)
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏: {method}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def _send_to_log(self, alerts: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ª–æ–≥"""
        summary = alerts.get('summary', {})
        
        if summary.get('total_alerts', 0) == 0:
            self.logger.info("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
            return True
        
        self.logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {summary['total_alerts']} "
                          f"(–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_alerts']})")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        for alert_type, alert_list in alerts.items():
            if isinstance(alert_list, list):
                for alert in alert_list:
                    level = alert.get('level', 'INFO')
                    message = alert.get('message', '')
                    
                    if level == 'CRITICAL':
                        self.logger.error(f"üö® CRITICAL: {message}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è WARNING: {message}")
        
        return True
    
    def _send_to_console(self, alerts: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å"""
        summary = alerts.get('summary', {})
        
        if summary.get('total_alerts', 0) == 0:
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
            return True
        
        print("\n" + "="*60)
        print("üö® –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
        print("="*60)
        print(f"–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {summary['total_alerts']}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_alerts']}")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary['warning_alerts']}")
        print("-"*60)
        
        for alert_type, alert_list in alerts.items():
            if isinstance(alert_list, list) and alert_list:
                print(f"\nüìã {alert_type.upper()}:")
                for alert in alert_list:
                    level_icon = "üî¥" if alert.get('level') == 'CRITICAL' else "üü°"
                    print(f"  {level_icon} {alert.get('message')}")
        
        print("="*60)
        return True
    
    def _send_to_email(self, alerts: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ email (–∑–∞–≥–ª—É—à–∫–∞)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
        self.logger.info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ email (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
        return False
    
    def generate_alert_report(self, alerts: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
        return {
            'report_timestamp': datetime.now().isoformat(),
            'alerts_summary': alerts.get('summary', {}),
            'alert_details': {
                'price_alerts': alerts.get('price_alerts', []),
                'availability_alerts': alerts.get('availability_alerts', []),
                'trend_alerts': alerts.get('trend_alerts', []),
                'quality_alerts': alerts.get('quality_alerts', [])
            },
            'recommendations': self._generate_alert_recommendations(alerts)
        }
    
    def _generate_alert_recommendations(self, alerts: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª–µ—Ä—Ç–æ–≤"""
        recommendations = []
        summary = alerts.get('summary', {})
        
        if summary.get('critical_alerts', 0) > 0:
            recommendations.append("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        if len(alerts.get('price_alerts', [])) > 10:
            recommendations.append("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏")
        
        if len(alerts.get('quality_alerts', [])) > 0:
            recommendations.append("–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        return recommendations
