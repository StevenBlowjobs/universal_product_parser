#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ü–µ–Ω
"""

import statistics
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pathlib import Path
import json

from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure


class TrendAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–µ–Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("trend_analyzer")
        
        self.analysis_settings = {
            'trend_period_days': 30,
            'seasonality_analysis': True,
            'volatility_threshold': 0.1,
            'min_data_points': 5
        }
        
        if 'trend_analysis' in self.config:
            self.analysis_settings.update(self.config['trend_analysis'])
    
    @retry_on_failure(max_retries=2)
    def analyze_price_trends(self, price_history: Dict[str, List[Dict]]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
        
        Args:
            price_history: –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {product_key: [{'date': ..., 'price': ...}]}
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        self.logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è {len(price_history)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        try:
            trends_analysis = {}
            
            for product_key, history in price_history.items():
                if len(history) >= self.analysis_settings['min_data_points']:
                    product_trend = self._analyze_product_trend(product_key, history)
                    trends_analysis[product_key] = product_trend
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            summary = self._generate_trends_summary(trends_analysis)
            
            return {
                'success': True,
                'total_products_analyzed': len(trends_analysis),
                'trends_analysis': trends_analysis,
                'summary': summary,
                'market_insights': self._generate_market_insights(trends_analysis)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _analyze_product_trend(self, product_key: str, history: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        sorted_history = sorted(history, key=lambda x: x['date'])
        
        prices = [point['price'] for point in sorted_history if point['price'] is not None]
        dates = [point['date'] for point in sorted_history]
        
        if len(prices) < 2:
            return {'trend': 'insufficient_data', 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        first_price = prices[0]
        last_price = prices[-1]
        min_price = min(prices)
        max_price = max(prices)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if first_price > 0:
            total_change_percent = ((last_price - first_price) / first_price) * 100
        else:
            total_change_percent = 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        trend_direction = self._determine_trend_direction(prices)
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = self._calculate_volatility(prices)
        
        # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑)
        seasonality = self._analyze_seasonality(prices, dates)
        
        return {
            'product_key': product_key,
            'trend_direction': trend_direction,
            'total_change_percent': total_change_percent,
            'total_change_amount': last_price - first_price,
            'volatility': volatility,
            'price_range': {
                'min': min_price,
                'max': max_price,
                'current': last_price
            },
            'seasonality': seasonality,
            'data_points': {
                'total': len(prices),
                'period_days': (datetime.fromisoformat(dates[-1]) - datetime.fromisoformat(dates[0])).days,
                'first_date': dates[0],
                'last_date': dates[-1]
            },
            'statistics': {
                'mean': statistics.mean(prices),
                'median': statistics.median(prices),
                'std_dev': statistics.stdev(prices) if len(prices) > 1 else 0
            }
        }
    
    def _determine_trend_direction(self, prices: List[float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
        if len(prices) < 3:
            return 'uncertain'
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é
        x = list(range(len(prices)))
        y = prices
        
        n = len(x)
        if n == 0:
            return 'uncertain'
        
        sum_x = sum(x)
        sum_y = sum(y)
        sum_xy = sum(xi * yi for xi, yi in zip(x, y))
        sum_x2 = sum(xi * xi for xi in x)
        
        try:
            slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x)
        except ZeroDivisionError:
            return 'uncertain'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ —É–≥–ª—É –Ω–∞–∫–ª–æ–Ω–∞
        if slope > 0.01:
            return 'upward'
        elif slope < -0.01:
            return 'downward'
        else:
            return 'stable'
    
    def _calculate_volatility(self, prices: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω"""
        if len(prices) < 2:
            return 0.0
        
        returns = []
        for i in range(1, len(prices)):
            if prices[i-1] != 0:
                returns.append((prices[i] - prices[i-1]) / prices[i-1])
        
        if not returns:
            return 0.0
        
        return statistics.stdev(returns) if len(returns) > 1 else 0.0
    
    def _analyze_seasonality(self, prices: List[float], dates: List[str]) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
        if len(prices) < 7:  # –ú–∏–Ω–∏–º—É–º –Ω–µ–¥–µ–ª—è –¥–∞–Ω–Ω—ã—Ö
            return {'detected': False, 'confidence': 0}
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return {
            'detected': False,
            'confidence': 0,
            'pattern': 'none'
        }
    
    def _generate_trends_summary(self, trends_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º"""
        if not trends_analysis:
            return {}
        
        directions = [analysis['trend_direction'] for analysis in trends_analysis.values()]
        changes = [analysis['total_change_percent'] for analysis in trends_analysis.values()]
        volatilities = [analysis['volatility'] for analysis in trends_analysis.values()]
        
        return {
            'trend_distribution': {
                'upward': directions.count('upward'),
                'downward': directions.count('downward'), 
                'stable': directions.count('stable'),
                'uncertain': directions.count('uncertain')
            },
            'price_changes': {
                'average_change': statistics.mean(changes) if changes else 0,
                'max_increase': max(changes) if changes else 0,
                'max_decrease': min(changes) if changes else 0,
                'positive_changes': sum(1 for c in changes if c > 0),
                'negative_changes': sum(1 for c in changes if c < 0)
            },
            'volatility_analysis': {
                'average_volatility': statistics.mean(volatilities) if volatilities else 0,
                'high_volatility_count': sum(1 for v in volatilities if v > self.analysis_settings['volatility_threshold']),
                'max_volatility': max(volatilities) if volatilities else 0
            }
        }
    
    def _generate_market_insights(self, trends_analysis: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        insights = []
        summary = self._generate_trends_summary(trends_analysis)
        
        if not summary:
            return ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]
        
        trend_dist = summary['trend_distribution']
        price_changes = summary['price_changes']
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        total_products = sum(trend_dist.values())
        if trend_dist['upward'] > total_products * 0.6:
            insights.append("üìà –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω")
        elif trend_dist['downward'] > total_products * 0.6:
            insights.append("üìâ –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if summary['volatility_analysis']['high_volatility_count'] > total_products * 0.3:
            insights.append("‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if price_changes['positive_changes'] > price_changes['negative_changes'] * 1.5:
            insights.append("üíπ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ä–æ—Å—Ç —Ü–µ–Ω")
        elif price_changes['negative_changes'] > price_changes['positive_changes'] * 1.5:
            insights.append("üîª –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω")
        
        return insights
    
    def predict_future_prices(self, trends_analysis: Dict[str, Any], days: int = 7) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
        
        Args:
            trends_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            
        Returns:
            Dict: –ü—Ä–æ–≥–Ω–æ–∑—ã —Ü–µ–Ω
        """
        self.logger.info(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π")
        
        predictions = {}
        
        for product_key, analysis in trends_analysis.items():
            if analysis['trend_direction'] == 'insufficient_data':
                continue
                
            current_price = analysis['price_range']['current']
            trend = analysis['trend_direction']
            volatility = analysis['volatility']
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
            if trend == 'upward':
                predicted_change = analysis['total_change_percent'] / analysis['data_points']['period_days'] * days
            elif trend == 'downward':
                predicted_change = analysis['total_change_percent'] / analysis['data_points']['period_days'] * days
            else:
                predicted_change = 0
            
            predicted_price = current_price * (1 + predicted_change / 100)
            
            # –£—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            confidence = max(0.1, 1 - volatility * 10)  # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            
            predictions[product_key] = {
                'current_price': current_price,
                'predicted_price': predicted_price,
                'predicted_change_percent': predicted_change,
                'confidence': confidence,
                'trend': trend,
                'prediction_date': (datetime.now() + timedelta(days=days)).isoformat()
            }
        
        return {
            'success': True,
            'prediction_horizon_days': days,
            'predictions': predictions,
            'total_predictions': len(predictions)
        }
