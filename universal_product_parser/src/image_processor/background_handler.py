#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""

import cv2
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from pathlib import Path
from .models.u2net_model import U2NetModel
from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure


class BackgroundHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–æ–Ω–æ–≤"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("background_handler")
        self.u2net = U2NetModel()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processing_settings = {
            'background_removal_confidence': 0.8,
            'edge_smoothing': True,
            'hair_processing': True,
            'default_background': 'white',
            'custom_background_path': None
        }
        
        if 'image_processing' in self.config:
            self.processing_settings.update(self.config['image_processing'])
    
    @retry_on_failure(max_retries=2)
    def remove_background(self, image_path: str, output_path: str = None) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.logger.info(f"üñºÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞: {image_path}")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = self._load_image(image_path)
            if image is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                    'original_path': image_path
                }
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é U2-Net
            mask = self.u2net.predict_mask(image)
            
            # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏
            refined_mask = self._refine_mask(mask, image)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
            result_image = self._apply_mask(image, refined_mask)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if output_path:
                save_success = self._save_transparent_image(result_image, output_path)
            else:
                original_path = Path(image_path)
                output_path = str(original_path.parent / f"{original_path.stem}_no_bg.png")
                save_success = self._save_transparent_image(result_image, output_path)
            
            result = {
                'success': save_success,
                'original_path': image_path,
                'output_path': output_path if save_success else None,
                'mask_quality': self._assess_mask_quality(refined_mask),
                'processing_time': None,  # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥
                'image_dimensions': image.shape
            }
            
            if save_success:
                self.logger.info(f"‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {output_path}")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {output_path}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'original_path': image_path
            }
    
    @retry_on_failure(max_retries=2)
    def replace_background(self, image_path: str, background_path: str = None, 
                         output_path: str = None) -> Dict[str, Any]:
        """
        –ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
            background_path: –ü—É—Ç—å –∫ —Ñ–æ–Ω–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.logger.info(f"üîÑ –ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞: {image_path}")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            foreground = self._load_image(image_path)
            if foreground is None:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                    'original_path': image_path
                }
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞
            if background_path and Path(background_path).exists():
                background = self._load_image(background_path)
                if background is None:
                    return {
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                        'background_path': background_path
                    }
                
                # –†–µ—Å–∞–π–∑ —Ñ–æ–Ω–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                background = self._resize_background(background, foreground.shape)
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
                background = self._create_default_background(foreground.shape)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            removal_result = self.remove_background(image_path)
            if not removal_result['success']:
                return removal_result
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ñ–æ–Ω–∞
            foreground_no_bg = self._load_image(removal_result['output_path'])
            
            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π —Ñ–æ–Ω
            composite_image = self._blend_images(background, foreground_no_bg)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if output_path:
                save_success = self._save_image(composite_image, output_path)
            else:
                original_path = Path(image_path)
                output_path = str(original_path.parent / f"{original_path.stem}_new_bg{original_path.suffix}")
                save_success = self._save_image(composite_image, output_path)
            
            result = {
                'success': save_success,
                'original_path': image_path,
                'background_path': background_path,
                'output_path': output_path if save_success else None,
                'composite_quality': self._assess_composite_quality(composite_image)
            }
            
            if save_success:
                self.logger.info(f"‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω: {output_path}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'original_path': image_path
            }
    
    def _load_image(self, image_path: str) -> Optional[np.ndarray]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            image = cv2.imread(image_path)
            if image is None:
                return None
            return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {image_path}: {e}")
            return None
    
    def _refine_mask(self, mask: np.ndarray, original_image: np.ndarray) -> np.ndarray:
        """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏
        _, binary_mask = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∞–µ–≤
        kernel = np.ones((5, 5), np.uint8)
        refined_mask = cv2.morphologyEx(binary_mask, cv2.MORPH_CLOSE, kernel)
        refined_mask = cv2.morphologyEx(refined_mask, cv2.MORPH_OPEN, kernel)
        
        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
        if self.processing_settings['edge_smoothing']:
            refined_mask = self._smooth_mask_edges(refined_mask, original_image)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ª–æ—Å/–º–µ—Ö–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.processing_settings['hair_processing']:
            refined_mask = self._process_hair_areas(refined_mask, original_image)
        
        return refined_mask
    
    def _smooth_mask_edges(self, mask: np.ndarray, image: np.ndarray) -> np.ndarray:
        """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –º–∞—Å–∫–∏"""
        # Gaussian blur –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
        blurred_mask = cv2.GaussianBlur(mask, (5, 5), 0)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –º–∞—Å–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        gradient = cv2.Laplacian(mask, cv2.CV_64F)
        gradient = np.absolute(gradient)
        gradient = np.uint8(255 * gradient / np.max(gradient))
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å–æ–∫
        smooth_mask = cv2.addWeighted(mask, 0.7, blurred_mask, 0.3, 0)
        
        return smooth_mask
    
    def _process_hair_areas(self, mask: np.ndarray, image: np.ndarray) -> np.ndarray:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π —Å –≤–æ–ª–æ—Å–∞–º–∏/–º–µ—Ö–æ–º"""
        # –î–µ—Ç–µ–∫—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –≤–æ–ª–æ—Å—ã
        gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ–Ω–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        sobelx = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=3)
        sobely = cv2.Sobel(gray_image, cv2.CV_64F, 0, 1, ksize=3)
        gradient_magnitude = np.sqrt(sobelx**2 + sobely**2)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        gradient_magnitude = np.uint8(255 * gradient_magnitude / np.max(gradient_magnitude))
        _, hair_mask = cv2.threshold(gradient_magnitude, 50, 255, cv2.THRESH_BINARY)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å–∫–æ–π
        combined_mask = cv2.bitwise_or(mask, hair_mask)
        
        return combined_mask
    
    def _apply_mask(self, image: np.ndarray, mask: np.ndarray) -> np.ndarray:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º"""
        # –°–æ–∑–¥–∞–Ω–∏–µ 4-–∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (RGBA)
        if len(image.shape) == 3:
            b_channel, g_channel, r_channel = cv2.split(image)
        else:
            b_channel = g_channel = r_channel = image
        
        alpha_channel = mask
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        alpha_channel = cv2.bitwise_not(alpha_channel)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ RGBA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rgba_image = cv2.merge([b_channel, g_channel, r_channel, alpha_channel])
        
        return rgba_image
    
    def _resize_background(self, background: np.ndarray, target_shape: Tuple[int, int, int]) -> np.ndarray:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ–Ω–∞ –ø–æ–¥ —Ü–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        target_height, target_width = target_shape[:2]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Ñ–æ–Ω–∞
        bg_height, bg_width = background.shape[:2]
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale = max(target_width / bg_width, target_height / bg_height)
        
        new_width = int(bg_width * scale)
        new_height = int(bg_height * scale)
        
        # –†–µ—Å–∞–π–∑
        resized_bg = cv2.resize(background, (new_width, new_height), interpolation=cv2.INTER_CUBIC)
        
        # –û–±—Ä–µ–∑–∫–∞ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        start_x = (new_width - target_width) // 2
        start_y = (new_height - target_height) // 2
        
        cropped_bg = resized_bg[start_y:start_y+target_height, start_x:start_x+target_width]
        
        return cropped_bg
    
    def _create_default_background(self, shape: Tuple[int, int, int]) -> np.ndarray:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞"""
        height, width, channels = shape
        
        if self.processing_settings['default_background'] == 'white':
            background = np.ones((height, width, channels), dtype=np.uint8) * 255
        elif self.processing_settings['default_background'] == 'black':
            background = np.zeros((height, width, channels), dtype=np.uint8)
        else:
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            background = self._create_gradient_background((height, width, channels))
        
        return background
    
    def _create_gradient_background(self, shape: Tuple[int, int, int]) -> np.ndarray:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞"""
        height, width, channels = shape
        background = np.zeros((height, width, channels), dtype=np.uint8)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –∫ —Ç–µ–º–Ω–æ–º—É
        for i in range(height):
            intensity = int(255 * (1 - i / height))
            background[i, :, :] = intensity
        
        return background
    
    def _blend_images(self, background: np.ndarray, foreground: np.ndarray) -> np.ndarray:
        """–ù–∞–ª–æ–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""
        # –ï—Å–ª–∏ foreground –∏–º–µ–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
        if foreground.shape[2] == 4:
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ RGB –∏ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
            foreground_rgb = foreground[:, :, :3]
            alpha = foreground[:, :, 3] / 255.0
            
            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            result = np.zeros_like(background, dtype=np.float32)
            
            for c in range(3):
                result[:, :, c] = alpha * foreground_rgb[:, :, c] + (1 - alpha) * background[:, :, c]
            
            return result.astype(np.uint8)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
            return foreground
    
    def _assess_mask_quality(self, mask: np.ndarray) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Å–∫–∏"""
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ç–∫–æ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—Ü
        edges = cv2.Canny(mask, 50, 150)
        edge_density = np.sum(edges > 0) / (mask.shape[0] * mask.shape[1])
        
        # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏
        mean_intensity = np.mean(mask)
        intensity_std = np.std(mask)
        
        return {
            'edge_sharpness': edge_density,
            'uniformity': 1.0 / (1.0 + intensity_std),
            'overall_quality': (edge_density + (1.0 / (1.0 + intensity_std))) / 2
        }
    
    def _assess_composite_quality(self, composite: np.ndarray) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        gray = cv2.cvtColor(composite, cv2.COLOR_RGB2GRAY)
        contrast = np.std(gray)
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        mean_color = np.mean(composite, axis=(0, 1))
        color_balance = np.std(mean_color)
        
        return {
            'contrast': contrast / 255.0,
            'color_balance': 1.0 / (1.0 + color_balance),
            'overall_quality': (contrast / 255.0 + (1.0 / (1.0 + color_balance))) / 2
        }
    
    def _save_transparent_image(self, image: np.ndarray, output_path: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ BGR –¥–ª—è OpenCV
            if image.shape[2] == 4:
                # RGBA to BGRA
                bgra = cv2.cvtColor(image, cv2.COLOR_RGBA2BGRA)
            else:
                bgra = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
            
            success = cv2.imwrite(output_path, bgra)
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _save_image(self, image: np.ndarray, output_path: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ BGR –¥–ª—è OpenCV
            if len(image.shape) == 3:
                image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
            else:
                image_bgr = image
            
            success = cv2.imwrite(output_path, image_bgr)
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    def get_available_backgrounds(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ–Ω–æ–≤"""
        backgrounds = []
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ–Ω—ã
        standard_backgrounds = [
            {'name': '–ë–µ–ª—ã–π', 'type': 'standard', 'path': 'white'},
            {'name': '–ß–µ—Ä–Ω—ã–π', 'type': 'standard', 'path': 'black'},
            {'name': '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π', 'type': 'standard', 'path': 'gradient'}
        ]
        
        backgrounds.extend(standard_backgrounds)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–æ–Ω—ã
        custom_bg_path = self.processing_settings.get('custom_background_path')
        if custom_bg_path and Path(custom_bg_path).exists():
            for bg_file in Path(custom_bg_path).glob('*.{jpg,jpeg,png}'):
                backgrounds.append({
                    'name': bg_file.stem,
                    'type': 'custom',
                    'path': str(bg_file)
                })
        
        return backgrounds
