#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
"""

import re
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure


class DataValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = setup_logger("data_validator")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validation_rules = {
            'min_name_length': 3,
            'max_name_length': 500,
            'min_price_value': 0,
            'max_price_value': 10000000,
            'required_fields': ['name', 'price', 'url'],
            'url_pattern': r'^https?://[^\s/$.?#].[^\s]*$',
            'allowed_image_formats': ['.jpg', '.jpeg', '.png', '.webp', '.gif']
        }
    
    @retry_on_failure(max_retries=2)
    def validate_products(self, products: List[Dict]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        self.logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        try:
            validation_results = {
                'total_products': len(products),
                'valid_products': [],
                'invalid_products': [],
                'validation_errors': {},
                'quality_metrics': {}
            }
            
            for i, product in enumerate(products):
                product_validation = self._validate_single_product(product)
                
                if product_validation['is_valid']:
                    validation_results['valid_products'].append({
                        'product': product,
                        'warnings': product_validation['warnings']
                    })
                else:
                    validation_results['invalid_products'].append({
                        'product': product,
                        'errors': product_validation['errors'],
                        'warnings': product_validation['warnings']
                    })
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
                    for error in product_validation['errors']:
                        if error not in validation_results['validation_errors']:
                            validation_results['validation_errors'][error] = 0
                        validation_results['validation_errors'][error] += 1
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            validation_results['quality_metrics'] = self._calculate_quality_metrics(validation_results)
            validation_results['success'] = True
            
            self.logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(validation_results['valid_products'])} –≤–∞–ª–∏–¥–Ω—ã—Ö, "
                           f"{len(validation_results['invalid_products'])} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö")
            
            return validation_results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'success': False,
                'error': str(e),
                'total_products': len(products),
                'valid_products': [],
                'invalid_products': []
            }
    
    def _validate_single_product(self, product: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in self.validation_rules['required_fields']:
            if field not in product or not product[field]:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if 'name' in product:
            name_validation = self._validate_name(product['name'])
            errors.extend(name_validation['errors'])
            warnings.extend(name_validation['warnings'])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
        if 'price' in product:
            price_validation = self._validate_price(product['price'])
            errors.extend(price_validation['errors'])
            warnings.extend(price_validation['warnings'])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if 'url' in product:
            url_validation = self._validate_url(product['url'])
            errors.extend(url_validation['errors'])
            warnings.extend(url_validation['warnings'])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if 'images' in product:
            images_validation = self._validate_images(product['images'])
            errors.extend(images_validation['errors'])
            warnings.extend(images_validation['warnings'])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        if 'characteristics' in product:
            chars_validation = self._validate_characteristics(product['characteristics'])
            warnings.extend(chars_validation['warnings'])
        
        return {
            'is_valid': len(errors) == 0,
            'errors': errors,
            'warnings': warnings
        }
    
    def _validate_name(self, name: str) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        errors = []
        warnings = []
        
        if not isinstance(name, str):
            errors.append("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return {'errors': errors, 'warnings': warnings}
        
        name = name.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(name) < self.validation_rules['min_name_length']:
            errors.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω. {self.validation_rules['min_name_length']} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if len(name) > self.validation_rules['max_name_length']:
            warnings.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ ({len(name)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        if not any(char.isalnum() for char in name):
            errors.append("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Å–æ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if re.search(r'[^\w\s\-\.\,\!\?\(\)]', name):
            warnings.append("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        return {'errors': errors, 'warnings': warnings}
    
    def _validate_price(self, price: Any) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
        errors = []
        warnings = []
        
        if price is None:
            errors.append("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")
            return {'errors': errors, 'warnings': warnings}
        
        try:
            price_float = float(price)
        except (ValueError, TypeError):
            errors.append("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return {'errors': errors, 'warnings': warnings}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if price_float < self.validation_rules['min_price_value']:
            errors.append(f"–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        
        if price_float > self.validation_rules['max_price_value']:
            warnings.append(f"–¶–µ–Ω–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è: {price_float}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        if price_float != round(price_float, 2):
            warnings.append("–¶–µ–Ω–∞ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π")
        
        return {'errors': errors, 'warnings': warnings}
    
    def _validate_url(self, url: str) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        errors = []
        warnings = []
        
        if not isinstance(url, str):
            errors.append("URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return {'errors': errors, 'warnings': warnings}
        
        url = url.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
        if not re.match(self.validation_rules['url_pattern'], url):
            errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã URL
        if len(url) > 2000:
            warnings.append("URL –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        if not url.startswith(('http://', 'https://')):
            errors.append("URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP –∏–ª–∏ HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª")
        
        return {'errors': errors, 'warnings': warnings}
    
    def _validate_images(self, images: List[str]) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        errors = []
        warnings = []
        
        if not isinstance(images, list):
            errors.append("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            return {'errors': errors, 'warnings': warnings}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if len(images) == 0:
            warnings.append("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞")
        
        if len(images) > 20:
            warnings.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, img_url in enumerate(images):
            if not isinstance(img_url, str):
                errors.append(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                continue
            
            img_url = img_url.strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
            if not re.match(self.validation_rules['url_pattern'], img_url):
                errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            img_lower = img_url.lower()
            has_valid_extension = any(img_lower.endswith(ext) for ext in self.validation_rules['allowed_image_formats'])
            
            if not has_valid_extension:
                warnings.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i} –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {img_url}")
        
        return {'errors': errors, 'warnings': warnings}
    
    def _validate_characteristics(self, characteristics: Dict) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        warnings = []
        
        if not isinstance(characteristics, dict):
            warnings.append("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return {'warnings': warnings}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if not characteristics:
            warnings.append("–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
        for key, value in characteristics.items():
            if not isinstance(key, str):
                warnings.append(f"–ö–ª—é—á —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π: {key}")
                continue
            
            if len(key) > 100:
                warnings.append(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–ª—é—á —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {key}")
            
            if isinstance(value, str) and len(value) > 500:
                warnings.append(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ '{key}': {value}")
        
        return {'warnings': warnings}
    
    def _calculate_quality_metrics(self, validation_results: Dict[str, Any]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        total_products = validation_results['total_products']
        valid_products = len(validation_results['valid_products'])
        invalid_products = len(validation_results['invalid_products'])
        
        if total_products == 0:
            return {
                'completeness_score': 0,
                'validity_score': 0,
                'quality_score': 0
            }
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        completeness_score = valid_products / total_products
        
        # –û—Ü–µ–Ω–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        validity_score = valid_products / total_products
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = (completeness_score + validity_score) / 2
        
        return {
            'completeness_score': completeness_score,
            'validity_score': validity_score,
            'quality_score': quality_score,
            'valid_products_count': valid_products,
            'invalid_products_count': invalid_products
        }
    
    def generate_validation_report(self, validation_results: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        metrics = validation_results['quality_metrics']
        
        report = {
            'report_timestamp': datetime.now().isoformat(),
            'summary': {
                'total_products': validation_results['total_products'],
                'valid_products': len(validation_results['valid_products']),
                'invalid_products': len(validation_results['invalid_products']),
                'data_quality_score': metrics['quality_score']
            },
            'common_errors': validation_results['validation_errors'],
            'recommendations': self._generate_recommendations(validation_results)
        }
        
        return report
    
    def _generate_recommendations(self, validation_results: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        recommendations = []
        metrics = validation_results['quality_metrics']
        
        if metrics['quality_score'] < 0.8:
            recommendations.append("–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç—ã")
        
        if validation_results['validation_errors']:
            common_errors = list(validation_results['validation_errors'].keys())[:3]
            recommendations.append(f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏: {', '.join(common_errors)}")
        
        if metrics['completeness_score'] < 0.9:
            recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è")
        
        return recommendations
