#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
"""

import re
from typing import Dict, List, Optional, Any
from bs4 import BeautifulSoup
import json
from ..utils.logger import setup_logger


class WebsiteStructureDetector:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞"""
    
    def __init__(self):
        self.logger = setup_logger("structure_detector")
        self.common_patterns = self._load_common_patterns()
        
    def _load_common_patterns(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        return {
            'product_name': [
                # XPath –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                '//h1[contains(@class, "title")]',
                '//h1[contains(@class, "product")]',
                '//div[contains(@class, "product-name")]//h1',
                '//h1[@itemprop="name"]',
                # CSS –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                'h1.product-title',
                '.product-name h1',
                '[data-product-name]',
                # Meta tags
                'meta[property="og:title"]'
            ],
            'price': [
                '//span[contains(@class, "price")]',
                '//meta[@property="product:price"]',
                '//div[contains(@class, "price")]',
                '.price-current',
                '[data-price]',
                '.product-price',
                'span.price'
            ],
            'images': [
                '//img[contains(@class, "product-image")]',
                '//div[contains(@class, "gallery")]//img',
                '.product-image img',
                '.gallery-slider img',
                'meta[property="og:image"]'
            ],
            'description': [
                '//div[contains(@class, "description")]',
                '//div[@itemprop="description"]',
                '.product-description',
                '.product-info__description',
                'meta[name="description"]'
            ],
            'characteristics': [
                '//table[contains(@class, "specs")]',
                '//div[contains(@class, "attributes")]',
                '//dl[contains(@class, "features")]',
                '.product-specifications',
                '.technical-data table'
            ],
            'rating': [
                '//div[contains(@class, "rating")]',
                '//span[contains(@class, "stars")]',
                'meta[property="og:rating"]',
                '.product-rating',
                '[data-rating]'
            ],
            'availability': [
                '//span[contains(@class, "stock")]',
                '//link[@itemprop="availability"]',
                '.product-availability',
                '.stock-status',
                '[data-in-stock]'
            ],
            'sku': [
                '//span[contains(@class, "sku")]',
                'meta[itemprop="sku"]',
                '.product-sku',
                '[data-product-id]'
            ]
        }
    
    def auto_detect_selectors(self, html_content: str) -> Dict[str, str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            html_content: HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        """
        self.logger.info("üïµÔ∏è –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤...")
        soup = BeautifulSoup(html_content, 'html.parser')
        detected_selectors = {}
        
        for field, patterns in self.common_patterns.items():
            selector = self._find_best_selector(soup, patterns, field)
            if selector:
                detected_selectors[field] = selector
                self.logger.debug(f"‚úÖ {field}: {selector}")
            else:
                self.logger.warning(f"‚ö†Ô∏è  {field}: —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        self._enhance_with_semantic_detection(soup, detected_selectors)
        
        self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: {len(detected_selectors)}")
        return detected_selectors
    
    def _find_best_selector(self, soup: BeautifulSoup, patterns: List[str], field_type: str) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—è"""
        for pattern in patterns:
            try:
                if pattern.startswith('//'):
                    # XPath –ø–æ–∏—Å–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ CSS)
                    css_equivalent = self._xpath_to_css(pattern)
                    elements = soup.select(css_equivalent)
                else:
                    # CSS –ø–æ–∏—Å–∫
                    elements = soup.select(pattern)
                
                if elements and self._validate_elements(elements, field_type):
                    return pattern
                    
            except Exception as e:
                self.logger.debug(f"–ü–∞—Ç—Ç–µ—Ä–Ω {pattern} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                continue
        
        return None
    
    def _xpath_to_css(self, xpath: str) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ XPath –≤ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä"""
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        conversions = {
            '//': '',  # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ XPath
            '[contains(@class, "']: '[class*="',
            '[@class="']: '[class="',
            '[@id="']: '[id="',
            '/': ' > ',
        }
        
        css = xpath
        for xpath_pattern, css_pattern in conversions.items():
            css = css.replace(xpath_pattern, css_pattern)
            
        return css.strip()
    
    def _validate_elements(self, elements: List, field_type: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not elements:
            return False
            
        element = elements[0]
        text_content = element.get_text(strip=True) if hasattr(element, 'get_text') else str(element)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
        validators = {
            'price': lambda x: bool(re.search(r'\d+[\s.,]*\d*', x)),
            'rating': lambda x: bool(re.search(r'[0-9.,]+', x)) or '‚òÖ' in x,
            'sku': lambda x: bool(re.search(r'[A-Za-z0-9-]+', x)),
            'availability': lambda x: any(word in x.lower() for word in ['–≤ –Ω–∞–ª–∏—á–∏–∏', '–µ—Å—Ç—å', 'available', 'stock']),
        }
        
        validator = validators.get(field_type)
        return validator(text_content) if validator else bool(text_content.strip())
    
    def _enhance_with_semantic_detection(self, soup: BeautifulSoup, selectors: Dict[str, str]):
        """–£–ª—É—á—à–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        if 'price' not in selectors:
            price_elements = soup.find_all(text=re.compile(r'[\d\s.,]+‚ÇΩ|—Ä—É–±|‚Ç¨|\$'))
            if price_elements:
                # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π
                for element in price_elements[:3]:
                    parent = element.parent
                    if parent and hasattr(parent, 'name'):
                        selectors['price'] = f"{parent.name}[class*='price']"
                        break
    
    def save_detected_structure(self, filepath: str, selectors: Dict[str, str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(selectors, f, indent=2, ensure_ascii=False)
            self.logger.info(f"üíæ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
