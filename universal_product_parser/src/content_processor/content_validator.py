#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import re
from typing import Dict, List, Optional, Tuple, Any
from difflib import SequenceMatcher
from ..utils.logger import setup_logger
from ..utils.error_handler import retry_on_failure


class ContentValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.logger = setup_logger("content_validator")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validation_criteria = {
            'min_similarity': 0.3,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            'max_similarity': 0.9,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            'min_length_ratio': 0.5,    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            'max_length_ratio': 2.0,    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            'max_repetition': 3,        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
            'readability_threshold': 0.6 # –ü–æ—Ä–æ–≥ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        }
    
    def validate_rewriting(self, original: str, rewritten: str, 
                         min_meaning_preservation: float = 0.8) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            original: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            rewritten: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            min_meaning_preservation: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        self.logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        
        try:
            validation_results = {}
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            validation_results['length_check'] = self._validate_length(original, rewritten)
            validation_results['similarity_check'] = self._validate_similarity(original, rewritten)
            validation_results['repetition_check'] = self._check_repetition(rewritten)
            validation_results['readability_check'] = self._check_readability(rewritten)
            validation_results['grammar_check'] = self._check_grammar(rewritten)
            
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            overall_score = self._calculate_overall_score(validation_results)
            validation_results['overall_score'] = overall_score
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            is_valid = (
                validation_results['length_check']['passed'] and
                validation_results['similarity_check']['passed'] and
                validation_results['repetition_check']['passed'] and
                overall_score >= min_meaning_preservation
            )
            
            validation_results['is_valid'] = is_valid
            validation_results['recommendation'] = self._generate_recommendation(validation_results)
            
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'‚úÖ –£—Å–ø–µ—Ö' if is_valid else '‚ùå –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")
            
            return validation_results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {
                'is_valid': False,
                'error': str(e),
                'recommendation': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å'
            }
    
    def _validate_length(self, original: str, rewritten: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
        orig_len = len(original)
        rewrite_len = len(rewritten)
        
        if orig_len == 0:
            ratio = 1.0
        else:
            ratio = rewrite_len / orig_len
        
        passed = (
            ratio >= self.validation_criteria['min_length_ratio'] and 
            ratio <= self.validation_criteria['max_length_ratio']
        )
        
        return {
            'passed': passed,
            'original_length': orig_len,
            'rewritten_length': rewrite_len,
            'ratio': ratio,
            'message': f"–î–ª–∏–Ω–∞: {ratio:.2f} –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞" + (" ‚úÖ" if passed else " ‚ùå")
        }
    
    def _validate_similarity(self, original: str, rewritten: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º"""
        similarity = SequenceMatcher(None, original, rewritten).ratio()
        
        passed = (
            similarity >= self.validation_criteria['min_similarity'] and 
            similarity <= self.validation_criteria['max_similarity']
        )
        
        return {
            'passed': passed,
            'similarity': similarity,
            'message': f"–°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f}" + (" ‚úÖ" if passed else " ‚ùå")
        }
    
    def _check_repetition(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤"""
        words = re.findall(r'\b\w+\b', text.lower())
        word_counts = {}
        
        for word in words:
            if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                word_counts[word] = word_counts.get(word, 0) + 1
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        max_repetition = max(word_counts.values()) if word_counts else 0
        passed = max_repetition <= self.validation_criteria['max_repetition']
        
        problem_words = [
            word for word, count in word_counts.items() 
            if count > self.validation_criteria['max_repetition']
        ]
        
        return {
            'passed': passed,
            'max_repetition': max_repetition,
            'problem_words': problem_words,
            'message': f"–ú–∞–∫—Å. –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {max_repetition}" + (" ‚úÖ" if passed else " ‚ùå")
        }
    
    def _check_readability(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if s.strip()]
        
        if not sentences:
            return {
                'passed': False,
                'readability_score': 0,
                'message': "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ‚ùå"
            }
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        total_words = 0
        total_sentences = len(sentences)
        
        for sentence in sentences:
            words = sentence.split()
            total_words += len(words)
        
        avg_sentence_length = total_words / total_sentences if total_sentences > 0 else 0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        readability_score = max(0, 1 - (avg_sentence_length - 10) / 20)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 10-15 —Å–ª–æ–≤
        
        passed = readability_score >= self.validation_criteria['readability_threshold']
        
        return {
            'passed': passed,
            'readability_score': readability_score,
            'avg_sentence_length': avg_sentence_length,
            'message': f"–ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {readability_score:.2f}" + (" ‚úÖ" if passed else " ‚ùå")
        }
    
    def _check_grammar(self, text: str) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', text)
        for i, sentence in enumerate(sentences[:-1]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
            if sentence and not sentence[-1] in '.!?':
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ {i+1}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        if '  ' in text:
            issues.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for sentence in sentences:
            if sentence and sentence[0].islower():
                issues.append("–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã")
                break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
        
        passed = len(issues) == 0
        
        return {
            'passed': passed,
            'issues': issues,
            'issue_count': len(issues),
            'message': f"–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: {len(issues)} –ø—Ä–æ–±–ª–µ–º" + (" ‚úÖ" if passed else " ‚ùå")
        }
    
    def _calculate_overall_score(self, validation_results: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        weights = {
            'length_check': 0.2,
            'similarity_check': 0.3,
            'repetition_check': 0.2,
            'readability_check': 0.2,
            'grammar_check': 0.1
        }
        
        score = 0
        
        # –û—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã
        length_ratio = validation_results['length_check']['ratio']
        if length_ratio < 1:
            length_score = length_ratio  # –®—Ç—Ä–∞—Ñ –∑–∞ —É–∫–æ—Ä–æ—á–µ–Ω–∏–µ
        else:
            length_score = 1 / length_ratio  # –®—Ç—Ä–∞—Ñ –∑–∞ —É–¥–ª–∏–Ω–µ–Ω–∏–µ
        score += length_score * weights['length_check']
        
        # –û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —Å—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å)
        similarity = validation_results['similarity_check']['similarity']
        optimal_similarity = 0.6  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
        similarity_score = 1 - abs(similarity - optimal_similarity)
        score += similarity_score * weights['similarity_check']
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        max_repetition = validation_results['repetition_check']['max_repetition']
        repetition_score = max(0, 1 - (max_repetition - 1) / 5)  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        score += repetition_score * weights['repetition_check']
        
        # –û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        readability_score = validation_results['readability_check']['readability_score']
        score += readability_score * weights['readability_check']
        
        # –û—Ü–µ–Ω–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
        grammar_issues = validation_results['grammar_check']['issue_count']
        grammar_score = max(0, 1 - grammar_issues / 5)  # –®—Ç—Ä–∞—Ñ –∑–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        score += grammar_score * weights['grammar_check']
        
        return min(1.0, max(0.0, score))
    
    def _generate_recommendation(self, validation_results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞"""
        recommendations = []
        
        if not validation_results['length_check']['passed']:
            ratio = validation_results['length_check']['ratio']
            if ratio < self.validation_criteria['min_length_ratio']:
                recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞")
            else:
                recommendations.append("–£–º–µ–Ω—å—à–∏—Ç—å –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞")
        
        if not validation_results['similarity_check']['passed']:
            similarity = validation_results['similarity_check']['similarity']
            if similarity < self.validation_criteria['min_similarity']:
                recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º")
            else:
                recommendations.append("–£–º–µ–Ω—å—à–∏—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º")
        
        if not validation_results['repetition_check']['passed']:
            recommendations.append("–£–º–µ–Ω—å—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤")
        
        if not validation_results['readability_check']['passed']:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å")
        
        if not validation_results['grammar_check']['passed']:
            recommendations.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        
        if not recommendations:
            return "–¢–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞"
        
        return "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: " + ", ".join(recommendations)
    
    def validate_technical_preservation(self, original: str, rewritten: str, 
                                     technical_terms: List[str]) -> Dict[str, Any]:
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        
        Args:
            original: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            rewritten: –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            technical_terms: –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        preserved_terms = []
        lost_terms = []
        
        original_lower = original.lower()
        rewritten_lower = rewritten.lower()
        
        for term in technical_terms:
            if term.lower() in original_lower:
                if term.lower() in rewritten_lower:
                    preserved_terms.append(term)
                else:
                    lost_terms.append(term)
        
        preservation_rate = len(preserved_terms) / max(1, len(technical_terms))
        
        return {
            'preserved_terms': preserved_terms,
            'lost_terms': lost_terms,
            'preservation_rate': preservation_rate,
            'passed': preservation_rate >= 0.9  # 90% —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
        }
