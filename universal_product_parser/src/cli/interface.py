#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Universal Product Parser
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path
from typing import Dict, List, Optional, Any
import questionary
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich.table import Table
from rich.markdown import Markdown
from rich.layout import Layout
from rich.prompt import Prompt, Confirm

from ..utils.logger import setup_logger
from ..utils.file_manager import FileManager
from ..core.adaptive_parser import AdaptiveProductParser


class InteractiveInterface:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self):
        self.console = Console()
        self.logger = setup_logger("interface")
        self.file_manager = FileManager()
        self.parser = None
        self.session_data = {}
        
    def show_banner(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        banner_text = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   UNIVERSAL PRODUCT PARSER                    ‚ïë
‚ïë                –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤                   ‚ïë
‚ïë        üÜï –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ + –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        
        self.console.print(Panel.fit(
            banner_text,
            style="bold blue",
            padding=(1, 2)
        ))
    
    async def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.show_banner()
        
        while True:
            choice = await questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    {"name": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", "value": "parse"},
                    {"name": "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞", "value": "config"},
                    {"name": "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "value": "test"},
                    {"name": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã", "value": "stats"},
                    {"name": "‚ùì –ü–æ–º–æ—â—å", "value": "help"},
                    {"name": "üö™ –í—ã—Ö–æ–¥", "value": "exit"}
                ],
                qmark="üéØ",
                pointer="‚Üí"
            ).unsafe_ask_async()
            
            if choice == "parse":
                await self.parse_menu()
            elif choice == "config":
                await self.config_menu()
            elif choice == "test":
                await self.test_menu()
            elif choice == "stats":
                await self.stats_menu()
            elif choice == "help":
                self.show_help()
            elif choice == "exit":
                self.console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="bold green")
                break
    
    async def parse_menu(self):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.console.print("\nüéØ [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞[/bold]")
        
        # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ URL
        url_source = await questionary.select(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ URL:",
            choices=[
                {"name": "üåê –í–≤–µ—Å—Ç–∏ URL –≤—Ä—É—á–Ω—É—é", "value": "manual"},
                {"name": "üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å URL", "value": "file"},
                {"name": "üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å target_urls.txt", "value": "default"}
            ],
            qmark="üîó"
        ).unsafe_ask_async()
        
        target_url = await self._get_url_from_source(url_source)
        if not target_url:
            self.console.print("‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω", style="bold red")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = await self._configure_filters()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        self.console.print("\nüìã [bold]–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:[/bold]")
        self._display_parse_summary(target_url, filters)
        
        if not await Confirm.ask("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"):
            return
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        await self._run_parsing_with_progress(target_url, filters)
    
    async def _get_url_from_source(self, source: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if source == "manual":
            return await questionary.text(
                "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
                validate=lambda text: len(text) > 0 or "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                qmark="üåê"
            ).unsafe_ask_async()
        
        elif source == "file":
            # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ input
            input_dir = Path("data/input")
            text_files = list(input_dir.glob("*.txt"))
            
            if not text_files:
                self.console.print("‚ùå –í –ø–∞–ø–∫–µ data/input –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤", style="yellow")
                return None
            
            file_choices = [{"name": f.name, "value": f} for f in text_files]
            selected_file = await questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:",
                choices=file_choices,
                qmark="üìÅ"
            ).unsafe_ask_async()
            
            try:
                with open(selected_file, 'r', encoding='utf-8') as f:
                    urls = [line.strip() for line in f if line.strip() and not line.startswith('#')]
                return urls[0] if urls else None
            except Exception as e:
                self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", style="red")
                return None
        
        elif source == "default":
            default_file = Path("data/input/target_urls.txt")
            if default_file.exists():
                try:
                    with open(default_file, 'r', encoding='utf-8') as f:
                        urls = [line.strip() for line in f if line.strip() and not line.startswith('#')]
                    return urls[0] if urls else None
                except Exception as e:
                    self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è target_urls.txt: {e}", style="red")
                    return None
            else:
                self.console.print("‚ùå –§–∞–π–ª data/input/target_urls.txt –Ω–µ –Ω–∞–π–¥–µ–Ω", style="yellow")
                return None
        
        return None
    
    async def _configure_filters(self) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        filters = {}
        
        self.console.print("\nüîç [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤[/bold]")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if await Confirm.ask("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ?"):
            min_price = await questionary.text(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:",
                default="0",
                validate=lambda x: x.replace('.', '').isdigit() or "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
                qmark="üí∞"
            ).unsafe_ask_async()
            
            max_price = await questionary.text(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:",
                default="1000000", 
                validate=lambda x: x.replace('.', '').isdigit() or "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
                qmark="üí∞"
            ).unsafe_ask_async()
            
            filters['price_range'] = {
                'min': float(min_price),
                'max': float(max_price)
            }
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if await Confirm.ask("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º?"):
            categories = await questionary.text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
                qmark="üìÇ"
            ).unsafe_ask_async()
            
            if categories.strip():
                filters['categories'] = [cat.strip() for cat in categories.split(',')]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if await Confirm.ask("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º?"):
            filters_text = await questionary.text(
                "–§–∏–ª—å—Ç—Ä—ã (—Ñ–æ—Ä–º–∞—Ç: '–≤–µ—Å:0.1-10, –¥–ª–∏–Ω–∞:100-500'):",
                qmark="‚öñÔ∏è"
            ).unsafe_ask_async()
            
            if filters_text.strip():
                filters['characteristics'] = filters_text
        
        return filters
    
    def _display_parse_summary(self, url: str, filters: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        table.add_row("URL", url)
        
        if 'price_range' in filters:
            price_range = filters['price_range']
            table.add_row("–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", f"{price_range['min']} - {price_range['max']}")
        
        if 'categories' in filters:
            table.add_row("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", ", ".join(filters['categories']))
        
        if 'characteristics' in filters:
            table.add_row("–§–∏–ª—å—Ç—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", filters['characteristics'])
        
        # –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        table.add_row("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤", "‚úÖ –í–∫–ª—é—á–µ–Ω–∞")
        table.add_row("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "‚úÖ –í–∫–ª—é—á–µ–Ω–∞")
        table.add_row("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel", "‚úÖ –ù–æ–≤–∞—è (—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏)")
        
        self.console.print(table)
    
    async def _run_parsing_with_progress(self, target_url: str, filters: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                TaskProgressColumn(),
                console=self.console,
                transient=True
            ) as progress:
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                main_task = progress.add_task("[cyan]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...", total=100)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
                self.parser = AdaptiveProductParser()
                await self.parser.initialize()
                progress.update(main_task, advance=20, description="[green]–ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞...")
                
                # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
                products = await self.parser.parse_site(target_url, filters)
                progress.update(main_task, advance=60, description="[blue]–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if products:
                    timestamp = asyncio.get_event_loop().time()
                    output_file = f"data/output/parsed_products_{int(timestamp)}.json"
                    
                    import json
                    with open(output_file, 'w', encoding='utf-8') as f:
                        json.dump(products, f, indent=2, ensure_ascii=False)
                    
                    progress.update(main_task, advance=20, description="[bold green]–ì–æ—Ç–æ–≤–æ!")
                    
                    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    self._display_results(products, output_file)
                else:
                    progress.update(main_task, advance=20, description="[yellow]–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.console.print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º", style="yellow")
                
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}", style="bold red")
        finally:
            if self.parser:
                await self.parser.close()
    
    def _display_results(self, products: List[Dict], output_file: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞—Ä—Ç–∏–∫—É–ª–∞—Ö –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö"""
        self.console.print(f"\nüéâ [bold green]–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω![/bold green]")
        
        table = Table(show_header=True, header_style="bold blue")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        table.add_row("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤", str(len(products)))
        
        # –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ê—Ä—Ç–∏–∫—É–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        articles_count = sum(1 for p in products if p.get('article'))
        total_images = sum(
            len(p.get('processed_images', {}).get('processed_images', [])) 
            for p in products
        )
        approved_images = sum(
            p.get('processed_images', {}).get('moderation_results', {}).get('approved_count', 0)
            for p in products
        )
        
        table.add_row("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", f"{articles_count}/{len(products)}")
        table.add_row("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", f"{approved_images}/{total_images} –æ–¥–æ–±—Ä–µ–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        prices = [p.get('price') for p in products if p.get('price')]
        if prices:
            table.add_row("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{sum(prices) / len(prices):.2f}")
            table.add_row("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{min(prices):.2f}")
            table.add_row("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{max(prices):.2f}")
        
        table.add_row("–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", output_file)
        
        self.console.print(table)
        
        # –ü–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if products:
            self.console.print("\nüì¶ [bold]–ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:[/bold]")
            for i, product in enumerate(products[:3], 1):
                article = product.get('article', 'N/A')
                images_count = len(product.get('processed_images', {}).get('processed_images', []))
                images_info = f"[–ò–∑–æ–±—Ä: {images_count}]" if images_count > 0 else "[–ù–µ—Ç –∏–∑–æ–±—Ä]"
                
                self.console.print(f"{i}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                self.console.print(f"   üí∞ –¶–µ–Ω–∞: {product.get('price', 'N/A')}")
                self.console.print(f"   üìù –ê—Ä—Ç–∏–∫—É–ª: {article} {images_info}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≤–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                main_image = product.get('processed_images', {}).get('main_image')
                if main_image:
                    self.console.print(f"   üñºÔ∏è  –ì–ª–∞–≤–Ω–æ–µ: {main_image.get('file_name', 'N/A')}")
    
    async def config_menu(self):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.console.print("\nüîß [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞[/bold]")
        
        config_options = await questionary.select(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            choices=[
                {"name": "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "value": "view"},
                {"name": "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", "value": "articles"},
                {"name": "üñºÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "value": "images"},
                {"name": "‚öôÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", "value": "edit"},
                {"name": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "value": "reset"},
                {"name": "‚Ü©Ô∏è  –ù–∞–∑–∞–¥", "value": "back"}
            ],
            qmark="‚öôÔ∏è"
        ).unsafe_ask_async()
        
        if config_options == "view":
            self._view_configuration()
        elif config_options == "articles":
            await self._configure_articles()
        elif config_options == "images":
            await self._configure_images()
        elif config_options == "edit":
            await self._edit_configuration()
        elif config_options == "reset":
            await self._reset_configuration()
    
    def _view_configuration(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import yaml
            config_path = Path("config/parser_config.yaml")
            
            if config_path.exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                
                self.console.print("\nüìÑ [bold]–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:[/bold]")
                
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                important_sections = ['article_generation', 'product_images_processing', 'parser']
                for section in important_sections:
                    if section in config:
                        self.console.print(f"\n[bold]{section.upper()}:[/bold]")
                        self.console.print(yaml.dump(
                            {section: config[section]}, 
                            default_flow_style=False, 
                            allow_unicode=True
                        ))
            else:
                self.console.print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", style="yellow")
                
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", style="red")
    
    async def _configure_articles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
        self.console.print("\nüéØ [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤[/bold]")
        
        try:
            import yaml
            config_path = Path("config/parser_config.yaml")
            
            if not config_path.exists():
                self.console.print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", style="yellow")
                return
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            method_choices = [
                {"name": "üîë –•–µ—à-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "value": "hash_based"},
                {"name": "üß© –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "value": "composite_based"},
                {"name": "üî¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è", "value": "sequential"}
            ]
            
            current_method = config.get('article_generation', {}).get('method', 'hash_based')
            new_method = await questionary.select(
                "–ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:",
                choices=method_choices,
                default=next((c for c in method_choices if c['value'] == current_method), method_choices[0]),
                qmark="üîë"
            ).unsafe_ask_async()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if 'article_generation' not in config:
                config['article_generation'] = {}
            
            config['article_generation']['method'] = new_method
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
            
            self.console.print(f"‚úÖ –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_method}", style="green")
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {e}", style="red")
    
    async def _configure_images(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.console.print("\nüñºÔ∏è  [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π[/bold]")
        
        try:
            import yaml
            config_path = Path("config/parser_config.yaml")
            
            if not config_path.exists():
                self.console.print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", style="yellow")
                return
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_config = config.get('product_images_processing', {})
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä
            max_images = await questionary.text(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–æ–≤–∞—Ä:",
                default=str(image_config.get('max_images_per_product', 10)),
                validate=lambda x: x.isdigit() and int(x) > 0,
                qmark="üì∑"
            ).unsafe_ask_async()
            
            # –ü–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            quality_threshold = await questionary.text(
                "–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (0.1-1.0):",
                default=str(image_config.get('moderation', {}).get('quality_threshold', 0.7)),
                validate=lambda x: x.replace('.', '').isdigit() and 0.1 <= float(x) <= 1.0,
                qmark="üéØ"
            ).unsafe_ask_async()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if 'product_images_processing' not in config:
                config['product_images_processing'] = {}
            
            config['product_images_processing']['max_images_per_product'] = int(max_images)
            
            if 'moderation' not in config['product_images_processing']:
                config['product_images_processing']['moderation'] = {}
            
            config['product_images_processing']['moderation']['quality_threshold'] = float(quality_threshold)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
            
            self.console.print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã", style="green")
            self.console.print(f"   üì∑ –ú–∞–∫—Å–∏–º—É–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {max_images}")
            self.console.print(f"   üéØ –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_threshold}")
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}", style="red")
    
    async def _edit_configuration(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.console.print("\nüìù [bold]–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏[/bold]")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        self.console.print("‚ÑπÔ∏è  –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", style="yellow")
        self.console.print("üìÅ –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª config/parser_config.yaml –≤—Ä—É—á–Ω—É—é")
    
    async def _reset_configuration(self):
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if await Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                config_path = Path("config/parser_config.yaml")
                if config_path.exists():
                    backup_path = config_path.with_suffix('.yaml.backup')
                    import shutil
                    shutil.copy2(config_path, backup_path)
                    self.console.print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}", style="green")
                
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
                from ...scripts.setup_environment import setup_environment
                setup_environment()
                
                self.console.print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", style="green")
                
            except Exception as e:
                self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", style="red")
    
    async def test_menu(self):
        """–ú–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.console.print("\nüß™ [bold]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è[/bold]")
        
        url = await questionary.text(
            "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            validate=lambda text: len(text) > 0 or "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            qmark="üåê"
        ).unsafe_ask_async()
        
        if not url:
            return
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console,
            transient=True
        ) as progress:
            
            task = progress.add_task("[cyan]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...", total=None)
            
            from ..utils.network_utils import NetworkUtils
            network_utils = NetworkUtils()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            progress.update(task, description="[blue]–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            internet_ok = await network_utils.check_internet_connection()
            
            if not internet_ok:
                progress.update(task, description="[red]‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
            progress.update(task, description="[green]–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞...")
            site_check = await network_utils.check_site_availability(url)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            progress.update(task, description="[bold]–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
            
            table = Table(show_header=True, header_style="bold blue")
            table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
            table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
            
            table.add_row("URL", url)
            table.add_row("–î–æ—Å—Ç—É–ø–µ–Ω", "‚úÖ –î–∞" if site_check['available'] else "‚ùå –ù–µ—Ç")
            table.add_row("–°—Ç–∞—Ç—É—Å –∫–æ–¥", str(site_check.get('status_code', 'N/A')))
            table.add_row("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{site_check.get('response_time', 0):.2f} —Å–µ–∫")
            table.add_row("–°–µ—Ä–≤–µ—Ä", site_check.get('server', 'N/A'))
            
            if not site_check['available']:
                table.add_row("–û—à–∏–±–∫–∞", site_check.get('error', 'Unknown'))
            
            self.console.print("\n" + table)
    
    async def stats_menu(self):
        """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤"""
        self.console.print("\nüìä [bold]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã[/bold]")
        
        from ..utils.error_handler import get_global_error_stats
        
        stats = get_global_error_stats()
        
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        table.add_row("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫", str(stats['total_errors']))
        table.add_row("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫", str(stats['recovered_errors']))
        
        if stats['total_errors'] > 0:
            recovery_rate = (stats['recovered_errors'] / stats['total_errors']) * 100
            table.add_row("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", f"{recovery_rate:.1f}%")
        
        # –û—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        for error_type, count in stats['by_type'].items():
            table.add_row(f"–û—à–∏–±–∫–∏ {error_type}", str(count))
        
        self.console.print(table)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        choice = await questionary.select(
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            choices=[
                {"name": "üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "value": "detailed"},
                {"name": "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "value": "clear"},
                {"name": "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", "value": "export"},
                {"name": "‚Ü©Ô∏è  –ù–∞–∑–∞–¥", "value": "back"}
            ],
            qmark="üìä"
        ).unsafe_ask_async()
        
        if choice == "clear":
            from ..utils.error_handler import global_error_handler
            global_error_handler.reset_stats()
            self.console.print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞", style="green")
        elif choice == "export":
            await self._export_stats_report(stats)
    
    async def _export_stats_report(self, stats: Dict[str, Any]):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            timestamp = asyncio.get_event_loop().time()
            report_file = f"data/output/stats_report_{int(timestamp)}.json"
            
            import json
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2, ensure_ascii=False)
            
            self.console.print(f"‚úÖ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {report_file}", style="green")
            
        except Exception as e:
            self.console.print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", style="red")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        help_text = """
# üÜò –ü–æ–º–æ—â—å –ø–æ Universal Product Parser

## üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

### üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ö–µ—à, –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π

### üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
- –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ —Ñ–æ–Ω–∞
- –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

### üìä –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
- Excel –æ—Ç—á–µ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ç–∏–∫—É–ª–∞—Ö –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
- –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

### üöÄ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
- –û–±—Ö–æ–¥ –∞–Ω—Ç–∏-–±–æ—Ç –∑–∞—â–∏—Ç—ã

### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
- –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ YAML —Ñ–∞–π–ª—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ User-Agent –∏ –ø—Ä–æ–∫—Å–∏

### üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
- –í–∞–ª–∏–¥–∞—Ü–∏—è URL

### üìä –û—Ç—á–µ—Ç—ã
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
- –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

### –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:

python -m src.cli.main parse --url https://example.com
python -m src.cli.main test --url https://example.com
python -m src.cli.main stats
