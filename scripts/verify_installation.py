#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import importlib
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    print(f"üêç Python version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 9:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ")
        return False

def check_package(package_name, import_name=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞"""
    if import_name is None:
        import_name = package_name
    
    try:
        module = importlib.import_module(import_name)
        version = getattr(module, '__version__', 'unknown')
        print(f"‚úÖ {package_name}: {version}")
        return True
    except ImportError as e:
        print(f"‚ùå {package_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - {e}")
        return False

def check_playwright_browsers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright"""
    try:
        from playwright import sync_api
        with sync_api.sync_playwright() as p:
            browsers = [
                ('chromium', p.chromium),
                ('firefox', p.firefox),
                ('webkit', p.webkit)
            ]
            
            for name, browser_type in browsers:
                try:
                    browser = browser_type.launch(headless=True)
                    browser.close()
                    print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä {name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä {name}: –æ—à–∏–±–∫–∞ - {e}")
                    
        return True
    except Exception as e:
        print(f"‚ùå Playwright: –æ—à–∏–±–∫–∞ - {e}")
        return False

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    required_dirs = [
        'config',
        'data/input',
        'data/output/excel_exports',
        'data/output/processed_images',
        'data/output/logs',
        'data/temp',
        'scripts'
    ]
    
    all_exists = True
    for dir_path in required_dirs:
        path = Path(dir_path)
        if path.exists():
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_exists = False
    
    return all_exists

def check_config_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'config/parser_config.yaml',
        'config/logging_config.conf',
        'data/input/target_urls.txt',
        'requirements.txt'
    ]
    
    all_exists = True
    for file_path in required_files:
        path = Path(file_path)
        if path.exists():
            print(f"‚úÖ –§–∞–π–ª {file_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –§–∞–π–ª {file_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_exists = False
    
    return all_exists

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Universal Product Parser")
    print("=" * 50)
    
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    results.append(("Python Version", check_python_version()))
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:")
    packages = [
        ('beautifulsoup4', 'bs4'),
        ('selenium', 'selenium'),
        ('playwright', 'playwright'),
        ('requests', 'requests'),
        ('pandas', 'pandas'),
        ('openpyxl', 'openpyxl'),
        ('pyyaml', 'yaml'),
        ('loguru', 'loguru'),
        ('tqdm', 'tqdm'),
        ('colorama', 'colorama')
    ]
    
    for package_name, import_name in packages:
        results.append((package_name, check_package(package_name, import_name)))
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ Playwright:")
    results.append(("Playwright Browsers", check_playwright_browsers()))
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    results.append(("Directories", check_directories()))
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    results.append(("Config Files", check_config_files()))
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 50)
    
    successful_checks = sum(1 for _, success in results if success)
    total_checks = len(results)
    
    for check_name, success in results:
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {check_name}")
    
    print("=" * 50)
    print(f"–ò—Ç–æ–≥–æ: {successful_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if successful_checks == total_checks:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
